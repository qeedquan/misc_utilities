#!/usr/bin/env python3

"""

https://libguides.library.kent.edu/SPSS/ChiSquare
https://byjus.com/maths/chi-square-test/

The Chi-Square Test of Independence determines whether there is an association between categorical variables (i.e., whether the variables are independent or related).
It is a nonparametric test.

The Chi-Square Test of Independence can only compare categorical variables.
It cannot make comparisons between continuous variables or between categorical and continuous variables.
Additionally, the Chi-Square Test of Independence only assesses associations between categorical variables, and can not provide any inferences about causation.

If your categorical variables represent "pre-test" and "post-test" observations, then the chi-square test of independence is not appropriate.
This is because the assumption of the independence of observations is violated. In this situation, McNemar's Test is appropriate.

Data Requirements
Your data must meet the following requirements:

Two categorical variables.
Two or more categories (groups) for each variable.
Independence of observations.
    There is no relationship between the subjects in each group.
    The categorical variables are not "paired" in any way (e.g. pre-test/post-test observations).
Relatively large sample size.
    Expected frequencies for each cell are at least 1.
    Expected frequencies should be at least 5 for the majority (80%) of the cells.

The null hypothesis (H0) and alternative hypothesis (H1) of the Chi-Square Test of Independence can be expressed in two different but equivalent ways:

H0: "[Variable 1] is independent of [Variable 2]"
H1: "[Variable 1] is not independent of [Variable 2]"

OR

H0: "[Variable 1] is not associated with [Variable 2]"
H1: "[Variable 1] is associated with [Variable 2]"

Test Statistic
The test statistic for the Chi-Square Test of Independence is denoted Χ2, and is computed as:

X^2 = Sum[i=1, R] Sum[j=1, C] (o[i][j] - e[i][j])^2 / e[i][j]

where

o[i][j] is the observed cell count in the ith row and jth column of the table

e[i][j] is the expected cell count in the ith row and jth column of the table, computed as

e[i][j]=row i total∗col j totalgrand total The quantity (oij - eij) is sometimes referred to as the residual of cell (i, j), denoted r[i][j].

The calculated Χ2 value is then compared to the critical value from the Χ2 distribution table with degrees of freedom df = (R - 1)(C - 1) and chosen confidence level.
If the calculated Χ2 value > critical Χ2 value, then we reject the null hypothesis.

Degrees of Freedom = (R-1)*(C-1), dependent on the number of categories

"""

from scipy.stats import *
from math import *
import numpy as np

"""

To generate a X^2 tables for various p-values, calculate the inverse cdf (also called point percent function) of the X^2 distribution for various degrees of freedom

https://plantsys.elte.hu/oktatas/Biometria/tablazatok/chisquare_distribution.pdf

"""
def test_chi2_df_p_value_table():
    p_table = [0.005, 0.01, 0.05, 0.10, 0.90, 0.95, 0.975, 0.99, 0.995]
    print(p_table)
    for df in range(1, 81):
        for p_value in p_table:
            print("%.03f" % (chi2.ppf(p_value, df)), end=" ")
            # verify that the PPF is indeed the inverse of the CDF
            assert(np.allclose(chi2.cdf(chi2.ppf(p_value, df), df), p_value))
        print()

"""

X^2 distribution can be generated by summing a bunch of gaussian random variables squared

Median:   Approximately k*(1 - 2/(9*k))^3

Mean:     k where k is the degree of freedom of the data (size of the array)
Variance: 2*k
Skewness: sqrt(8/k)
Kurtosis: 12/k

"""
def test_chi2_moments(iterations, size):
    r = []
    for i in range(iterations):
        x = norm.rvs(size=size)
        r.append(np.sum(x*x))

    k = size
    print("Estimating X^2 distribution")
    print("Median   %f %f" % (np.median(r), k * (1 - 2/(9*k))**3 ))
    print("Mean     %f %f" % (np.mean(r), k))
    print("Var      %f %f" % (np.var(r), 2*k))
    print("Skew     %f %f" % (skew(r), sqrt(8/k)))
    print("Kurtosis %f %f" % (kurtosis(r), 12/k))
    print()

test_chi2_df_p_value_table()
test_chi2_moments(100_000, 67)
test_chi2_moments(100_000, 30)

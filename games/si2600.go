// ported from http://aiju.de/code/homework/2600.c
package main

import (
	"bytes"
	"encoding/binary"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"runtime"

	"github.com/qeedquan/go-media/sdl"
	"github.com/qeedquan/go-media/sdl/sdlimage/sdlcolor"
)

var (
	si       Mach
	window   *sdl.Window
	renderer *sdl.Renderer
	texture  *sdl.Texture
	audev    sdl.AudioDeviceID
	pixels   [SCRW * SCRH * 4]uint8
	saveslot int
	savedir  string
)

func main() {
	runtime.LockOSThread()
	log.SetFlags(0)
	log.SetPrefix("si2600: ")
	parseFlags()
	initSDL()
	si.Reset()
	for {
		si.Step()
	}
}

func parseFlags() {
	savedir = filepath.Join(sdl.GetBasePath(), "sav")
	flag.BoolVar(&si.Trace, "t", false, "trace")
	flag.StringVar(&savedir, "s", savedir, "save directory")
	flag.Parse()
}

func initSDL() {
	err := sdl.Init(sdl.INIT_VIDEO | sdl.INIT_TIMER)
	if err != nil {
		log.Fatal(err)
	}

	err = sdl.InitSubSystem(sdl.INIT_AUDIO)
	if err != nil {
		log.Println(err)
	}

	spec := sdl.AudioSpec{
		Freq:     44100,
		Format:   sdl.AUDIO_S16,
		Channels: 2,
		Samples:  1024,
	}
	audev, spec, err = sdl.OpenAudioDevice("", 0, spec, 0)
	if err != nil {
		log.Println(err)
	}

	window, err = sdl.CreateWindow("Space Invaders", sdl.WINDOWPOS_CENTERED, sdl.WINDOWPOS_CENTERED, SCRW, SCRH, sdl.WINDOW_RESIZABLE)
	if err != nil {
		log.Fatal(err)
	}

	renderer, err = sdl.CreateRenderer(window, -1, sdl.RENDERER_ACCELERATED|sdl.RENDERER_PRESENTVSYNC)
	if err != nil {
		log.Fatal(err)
	}

	texture, err = renderer.CreateTexture(sdl.PIXELFORMAT_ARGB8888, sdl.TEXTUREACCESS_STREAMING, SCRW, SCRH)
	if err != nil {
		log.Fatal(err)
	}

	sdl.ShowCursor(0)
	audev.PauseAudio(0)
}

func saveState() {
	os.MkdirAll(savedir, 0755)
	name := filepath.Join(savedir, fmt.Sprintf("%d.sav", saveslot))

	b := new(bytes.Buffer)
	binary.Write(b, binary.LittleEndian, &si)
	err := os.WriteFile(name, b.Bytes(), 0644)
	if err != nil {
		log.Println("Failed to save state:", err)
	} else {
		log.Println("Saved state")
	}
}

func loadState() {
	name := filepath.Join(savedir, fmt.Sprintf("%d.sav", saveslot))
	f, err := os.Open(name)
	if err != nil {
		log.Println("Failed to load state:", err)
		return
	}
	defer f.Close()

	err = binary.Read(f, binary.LittleEndian, &si)
	if err != nil {
		log.Println("Failed to load state:", err)
	} else {
		log.Println("Loaded state")
	}
}

const (
	SCRW    = 640
	SCRH    = 480
	PICW    = 320
	PICH    = 222
	HZ      = 3579545
	RATE    = 44100
	SAMPDIV = HZ / 3 / RATE
)

const (
	SRCPF = iota
	SRCP0
	SRCP1
	SRCM0
	SRCM1
	SRCBL
)

const (
	FC = 1 << 0
	FZ = 1 << 1
	FI = 1 << 2
	FD = 1 << 3
	FB = 1 << 4
	FV = 1 << 6
	FN = 1 << 7
)

const (
	VSYNC = iota
	VBLANK
	WSYNC
	RSYNC
	NUSIZ0
	NUSIZ1
	COLUP0
	COLUP1
	COLUPF
	COLUBK
	CTRLPF
	REFP0
	REFP1
	PF0
	PF1
	PF2
	RESP0
	RESP1
	RESM0
	RESM1
	RESBL
	AUDC0
	AUDC1
	AUDF0
	AUDF1
	AUDV0
	AUDV1
	GRP0
	GRP1
	ENAM0
	ENAM1
	ENABL
	HMP0
	HMP1
	HMM0
	HMM1
	HMBL
	VDELP0
	VDELP1
	VDELBL
	RESMP0
	RESMP1
	HMOVE
	HMCLR
	CXCLR
)

type Mach struct {
	R                        [64]uint8
	PC                       uint16
	A, X, Y, P, S            uint8
	NRDY                     uint8
	ROM                      [0x1000]uint8
	RAM                      [0x80]uint8
	PIC                      [PICW * PICH * 4 * 9]uint8
	PPUX, PPUY               int32
	P0X, P1X, M0X, M1X, BLX  uint8
	COLL                     uint16
	COL, PRI                 uint8
	DISP                     uint8
	TMR, TMRRUN, TMRSPD      uint8
	TMRPRE, TMRCL            uint32
	GRP0D, GRP1D, ENABLD     uint8
	KEYS                     uint32
	SNDDIV                   uint32
	SDIV, FDIV, CDIV, CH, SR [2]int32
	Trace                    bool
}

func (m *Mach) Reset() {
	*m = Mach{
		Trace: m.Trace,
	}
	copy(m.ROM[:], rom[:])
	m.SR = [2]int32{-1, -1}
	m.PC = uint16(m.memread(0xFFFC)) | uint16(m.memread(0xFFFD))<<8
	m.P = FI
}

func (m *Mach) memread(a uint16) uint8 {
	var v uint8
	switch {
	case a&0x1000 != 0:
		v = m.ROM[a&0xfff]
	case a&(1<<7) == 0:
		v = m.tiaread(a & 0xf)
	case a&(1<<9) == 0:
		v = m.RAM[a&0x7f]
	default:
		v = m.ioread(a & 7)
	}
	m.io()
	return v
}

func (m *Mach) memwrite(a uint16, v uint8) {
	switch {
	case a&0x1000 != 0:
	case a&(1<<7) == 0:
		m.tiawrite(a&0x3f, v)
	case a&(1<<9) == 0:
		m.RAM[a&0x7f] = v
	default:
		m.iowrite(a&7, v)
	}
	m.io()
}

func (m *Mach) timerstep() {
	m.TMRCL++
	if m.TMRSPD != 0 || m.TMRCL&(m.TMRPRE-1) == 0 {
		if m.TMR == 0 {
			m.TMRSPD = 1
			m.TMRRUN |= (3 << 6)
		}
		m.TMR--
	}
}

func (m *Mach) tiaread(a uint16) uint8 {
	if a < 8 {
		return uint8(m.COLL >> ((a << 1) & 14) << 6)
	}
	if a == 0xc {
		return uint8((^m.KEYS << 3) & 0x80)
	}
	return 0x80
}

func (m *Mach) tiawrite(a uint16, v uint8) {
	switch a {
	case VSYNC:
		if v&2 != 0 {
			m.flush()
		}
		return
	case VBLANK:
		if v&1 == 0 {
			m.PPUY = 0
		}
	case WSYNC:
		m.NRDY = 1
	case RESP0:
		m.P0X = uint8(m.PPUX + 1)
		if m.PPUX >= 160 {
			m.P0X = 3
		}
	case RESP1:
		m.P1X = uint8(m.PPUX + 1)
		if m.PPUX >= 160 {
			m.P1X = 3
		}
	case RESM0:
		m.M0X = uint8(m.PPUX + 1)
		if m.PPUX >= 160 {
			m.M0X = 2
		}
	case RESM1:
		m.M1X = uint8(m.PPUX + 1)
		if m.PPUX >= 160 {
			m.M1X = 2
		}
	case RESBL:
		m.BLX = uint8(m.PPUX + 1)
		if m.PPUX >= 160 {
			m.BLX = 2
		}
	case HMOVE:
		m.P0X = uint8(int8(m.P0X)-int8(m.R[HMP0])>>4) % 160
		m.P1X = uint8(int8(m.P1X)-int8(m.R[HMP1])>>4) % 160
		m.M0X = uint8(int8(m.M0X)-int8(m.R[HMM0])>>4) % 160
		m.M1X = uint8(int8(m.M1X)-int8(m.R[HMM1])>>4) % 160
		m.BLX = uint8(int8(m.BLX)-int8(m.R[HMBL])>>4) % 160
	case HMCLR:
		m.R[HMP0] = 0
		m.R[HMP1] = 0
		m.R[HMM0] = 0
		m.R[HMM1] = 0
		m.R[HMBL] = 0
	case GRP0:
		if m.R[VDELP1]&1 != 0 {
			m.R[GRP1] = m.GRP1D
		}
		if m.R[VDELP0]&1 != 0 {
			m.GRP0D = v
			return
		}
	case GRP1:
		if m.R[VDELP0]&1 != 0 {
			m.R[GRP0] = m.GRP0D
		}
		if m.R[VDELBL]&1 != 0 {
			m.R[ENABL] = m.ENABLD
		}
		if m.R[VDELP1]&1 != 0 {
			m.GRP1D = v
			return
		}
	case ENABL:
		if m.R[VDELBL]&1 != 0 {
			m.ENABLD = v
			return
		}
	case CXCLR:
		m.COLL = 0
	}
	m.R[a] = v
}

func (m *Mach) ioread(a uint16) uint8 {
	switch a {
	case 0:
		return ^uint8(m.KEYS << 4)
	case 2:
		return uint8((m.KEYS>>5 ^ 3) | 1<<3)
	case 4:
		m.TMRSPD = 0
		return m.TMR
	case 5:
		v := m.TMRRUN
		m.TMRRUN &^= (1 << 6)
		return v
	}
	return 0
}

func (m *Mach) iowrite(a uint16, v uint8) {
	switch a {
	case 4:
		m.TMRPRE = 1
	case 5:
		m.TMRPRE = 8
	case 6:
		m.TMRPRE = 64
	case 7:
		m.TMRPRE = 1024
	default:
		return
	}
	m.TMRRUN &^= (1 << 7)
	m.TMRSPD = 0
	if v == 0 {
		m.TMRSPD = 1
	}
	m.TMR = v - 1
}

func (m *Mach) io() {
	m.timerstep()
	m.tiastep()
	m.tiastep()
	m.tiastep()
	if m.SNDDIV++; m.SNDDIV == SAMPDIV {
		m.SNDDIV = 0
		m.sample()
	}
}

func (m *Mach) fetch8() uint8 {
	v := m.memread(m.PC)
	m.PC++
	return v
}

func (m *Mach) fetch16() uint16 {
	r := uint16(m.fetch8())
	r |= uint16(m.fetch8()) << 8
	return r
}

func (m *Mach) push8(v uint8) {
	m.memwrite(0x100|uint16(m.S), v)
	m.S--
}

func (m *Mach) push16(v uint16) {
	m.memwrite(0x100|uint16(m.S), uint8(v>>8))
	m.S--
	m.memwrite(0x100|uint16(m.S), uint8(v))
	m.S--
}

func (m *Mach) pop8() uint8 {
	m.S++
	return m.memread(0x100 | uint16(m.S))
}

func (m *Mach) pop16() uint16 {
	v := uint16(m.pop8())
	v |= uint16(m.pop8()) << 8
	return v
}

func (m *Mach) imm() uint8 {
	return m.fetch8()
}

func (m *Mach) zp() uint8 {
	return m.memread(uint16(m.fetch8()))
}

func (m *Mach) zpx() uint8 {
	return m.memread(m.azpx(m.X))
}

func (m *Mach) zpy() uint8 {
	return m.memread(m.azpx(m.Y))
}

func (m *Mach) abso() uint8 {
	return m.memread(m.fetch16())
}

func (m *Mach) absx() uint8 {
	return m.memread(m.aabsx(m.X, 0))
}

func (m *Mach) absy() uint8 {
	return m.memread(m.aabsx(m.Y, 0))
}

func (m *Mach) indx() uint8 {
	return m.memread(m.aindx())
}

func (m *Mach) indy() uint8 {
	return m.memread(m.aindy(0))
}

func (m *Mach) azpx(a uint8) uint16 {
	v := m.fetch8()
	m.memread(uint16(v))
	return uint16(v) + uint16(a)
}

func (m *Mach) aabsx(a uint8, wr int) uint16 {
	v := m.fetch16()
	c := (uint16(uint8(v)) + uint16(a)) & 0x100
	v += uint16(a)
	if c != 0 || wr != 0 {
		m.memread(v - c)
	}
	return v
}

func (m *Mach) aindx() uint16 {
	r := m.fetch8()
	m.memread(uint16(r))
	r += m.X
	a := uint16(m.memread(uint16(r)))
	r++
	a |= uint16(m.memread(uint16(r))) << 8
	return a
}

func (m *Mach) aindy(wr int) uint16 {
	r := m.fetch8()
	a := uint16(m.memread(uint16(r))) + uint16(m.Y)
	r++
	c := a & 0x100
	a += uint16(m.memread(uint16(r))) << 8
	if c != 0 || wr != 0 {
		m.memread(a - c)
	}
	return a
}

func (m *Mach) adc(d uint8) {
	var r int
	if m.P&FD != 0 {
		r = int(m.A&0xf) + int(d&0xf) + int(m.P&FC)
		if r > 0x09 {
			r += 0x06
		}
		if r > 0x1f {
			r -= 0x10
		}
		r += int(m.A&0xf0) + int(d&0xf0)
	} else {
		r = int(m.A) + int(d) + int(m.P&FC)
	}
	m.P &^= (FN | FZ | FV | FC)
	if ^(m.A^d)&(m.A^uint8(r))&0x80 != 0 {
		m.P |= FV
	}
	if m.P&FD != 0 && r > 0x9f {
		r += 0x60
	}
	if r > 0xff {
		m.P |= FC
	}
	if r&0x80 != 0 {
		m.P |= FN
	}
	m.A = uint8(r)
	if m.A == 0 {
		m.P |= FZ
	}
}

func (m *Mach) nz(d uint8) uint8 {
	m.P &^= (FN | FZ)
	if d&0x80 != 0 {
		m.P |= FN
	}
	if d == 0 {
		m.P |= FZ
	}
	return d
}

func (m *Mach) asl(a uint16) {
	m.P &^= (FN | FZ | FC)
	v := m.memread(a)
	m.memwrite(a, v)
	if v&0x80 != 0 {
		m.P |= FC
	}
	v <<= 1
	if v == 0 {
		m.P |= FZ
	}
	if v&0x80 != 0 {
		m.P |= FN
	}
	m.memwrite(a, v)
}

func (m *Mach) lsr(a uint16) {
	m.P &^= (FN | FZ | FC)
	v := m.memread(a)
	m.memwrite(a, v)
	m.P |= v & 1
	v >>= 1
	if v == 0 {
		m.P |= FZ
	}
	if v&0x80 != 0 {
		m.P |= FN
	}
	m.memwrite(a, v)
}

func (m *Mach) branch() {
	t := int8(m.fetch8())
	m.memread(m.PC)
	npc := uint16(int32(m.PC) + int32(t))
	if (npc^m.PC)>>8 != 0 {
		m.memread(m.PC&0xff00 | npc&0xff)
	}
	m.PC = npc
}

func (m *Mach) cmp(a, d uint8) {
	m.P &^= (FN | FZ | FC)
	if a == d {
		m.P |= FZ
	}
	if a >= d {
		m.P |= FC
	}
	if (a-d)&0x80 != 0 {
		m.P |= FN
	}
}

func (m *Mach) dec(a uint16) {
	v := m.memread(a)
	m.memwrite(a, v)
	m.memwrite(a, m.nz(v-1))
}

func (m *Mach) inc(a uint16) {
	v := m.memread(a)
	m.memwrite(a, v)
	v = m.nz(v + 1)
	m.memwrite(a, v)
}

func (m *Mach) rol(a uint16) {
	v := m.memread(a)
	m.memwrite(a, v)
	b := m.P & FC
	m.P &^= (FC | FN | FZ)
	if v&0x80 != 0 {
		m.P |= FC
	}
	v = (v << 1) | b
	if v&0x80 != 0 {
		m.P |= FN
	}
	if v == 0 {
		m.P |= FZ
	}
	m.memwrite(a, v)
}

func (m *Mach) ror(a uint16) {
	v := m.memread(a)
	m.memwrite(a, v)
	b := m.P & FC
	m.P &^= (FC | FN | FZ)
	m.P |= v & 1
	v = (v >> 1) | (b << 7)
	if v&0x80 != 0 {
		m.P |= FN
	}
	if v == 0 {
		m.P |= FZ
	}
	m.memwrite(a, v)
}

func (m *Mach) sbc(d uint8) {
	var r int
	if m.P&FD != 0 {
		d = ^d
		r = int(m.A&0xf) + int(d&0xf) + int(m.P&FC)
		if r < 0x10 {
			r -= 0x06
		}
		if r < 0 {
			r += 0x10
		}
		r += int(m.A&0xf0) + int(d&0xf0)
	} else {
		r = int(m.A) + int(uint8(^d)) + int(m.P&FC)
	}
	m.P &^= (FZ | FV | FC | FN)
	if (m.A^d)&(m.A^uint8(r))&0x80 != 0 {
		m.P |= FV
	}
	if r > 0xff {
		m.P |= FC
	} else if m.P&FD != 0 {
		r -= 0x60
	}
	m.A = uint8(r)
	if m.A == 0 {
		m.P |= FZ
	}
	if m.A&0x80 != 0 {
		m.P |= FN
	}
}

func (m *Mach) interrupt(nmi, brk uint8) {
	m.fetch8()
	m.push16(m.PC)
	m.push8(m.P | 0x20 | (brk << 4))
	m.PC = uint16(m.memread(0xfffa | m.not(nmi)<<2))
	m.PC |= uint16(m.memread(0xfffb|(m.not(nmi)<<2))) << 8
	m.P |= FI
}

func (m *Mach) not(a uint8) uint16 {
	if a != 0 {
		return 1
	}
	return 0
}

func (m *Mach) Step() {
	if m.NRDY != 0 {
		m.io()
		return
	}

	curpc := m.PC
	op := m.fetch8()
	if m.Trace {
		fmt.Printf("pc %04x op %02x a %02x x %02x y %02x s %02x p %02x nrdy %d\n",
			curpc, op, m.A, m.X, m.Y, m.S, m.P, m.NRDY)
		fmt.Printf("ppux %d ppuy %d p0x %d p1x %d m0x %d m1x %d blx %d\n",
			m.PPUX, m.PPUY, m.P0X, m.P1X, m.M0X, m.M1X, m.BLX)
		fmt.Printf("coll %d col %d pri %d disp %d\n",
			m.COLL, m.COL, m.PRI, m.DISP)
		fmt.Printf("tmr %d tmrspd %d tmrrun %d tmrpre %d tmrcl %d\n",
			m.TMR, m.TMRSPD, m.TMRRUN, m.TMRPRE, m.TMRCL)
		fmt.Printf("grp0d %d grp1d %d enabld %d snddiv %d\n",
			m.GRP0D, m.GRP1D, m.ENABLD, m.SNDDIV)
		fmt.Printf("sdiv %d %d fdiv %d %d cdiv %d %d ch %d %d sr %d %d\n",
			m.SDIV[0], m.SDIV[1], m.FDIV[0], m.FDIV[1], m.CDIV[0], m.CDIV[1], m.CH[0], m.CH[1], m.SR[0], m.SR[1])
		fmt.Printf("\n")
	}
	switch op {
	case 0x00:
		m.fetch8()
		m.interrupt(0, 1)
	case 0x01:
		m.A |= m.indx()
		m.nz(m.A)
	case 0x05:
		m.A |= m.zp()
		m.nz(m.A)
	case 0x06:
		m.asl(uint16(m.fetch8()))
	case 0x08:
		m.memread(m.PC)
		m.push8(m.P | 0x30)
	case 0x09:
		m.A |= m.imm()
		m.nz(m.A)
	case 0x0a:
		m.P &^= (FN | FZ | FC)
		if m.A&0x80 != 0 {
			m.P |= FC
		}
		m.A <<= 1
		if m.A == 0 {
			m.P |= FZ
		}
		if m.A&0x80 != 0 {
			m.P |= FN
		}
		m.memread(m.PC)
	case 0x0d:
		m.A |= m.abso()
		m.nz(m.A)
	case 0x0e:
		m.asl(m.fetch16())
	case 0x10:
		if m.P&FN == 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0x11:
		m.A |= m.indy()
		m.nz(m.A)
	case 0x15:
		m.A |= m.zpx()
		m.nz(m.A)
	case 0x16:
		m.asl(m.azpx(m.X))
	case 0x18:
		m.P &^= FC
		m.memread(m.PC)
	case 0x19:
		m.A |= m.absy()
		m.nz(m.A)
	case 0x1d:
		m.A |= m.absx()
		m.nz(m.A)
	case 0x1e:
		m.asl(m.aabsx(m.X, 1))
	case 0x20:
		v := m.fetch8()
		m.memread(uint16(m.S) | 0x100)
		m.push16(m.PC)
		m.PC = uint16(m.fetch8())<<8 | uint16(v)
	case 0x21:
		m.A &= m.indx()
		m.nz(m.A)
	case 0x24:
		a := m.memread(uint16(m.fetch8()))
		m.P &^= (FN | FZ | FV)
		m.P |= a & 0xc0
		if a&m.A == 0 {
			m.P |= FZ
		}
	case 0x25:
		m.A &= m.zp()
		m.nz(m.A)
	case 0x26:
		m.rol(uint16(m.fetch8()))
	case 0x28:
		m.memread(m.PC)
		m.memread(0x100 | uint16(m.S))
		m.P = m.pop8() & 0xcf
	case 0x29:
		m.A &= m.imm()
		m.nz(m.A)
	case 0x2a:
		a := m.P & FC
		m.P &^= (FC | FZ | FN)
		if m.A&0x80 != 0 {
			m.P |= FC
		}
		m.A = (m.A << 1) | a
		if m.A&0x80 != 0 {
			m.P |= FN
		}
		if m.A == 0 {
			m.P |= FZ
		}
		m.memread(m.PC)
	case 0x2c:
		a := m.memread(m.fetch16())
		m.P &^= (FN | FZ | FV)
		m.P |= a & 0xc0
		if (a & m.A) == 0 {
			m.P |= FZ
		}
	case 0x2d:
		m.A &= m.abso()
		m.nz(m.A)
	case 0x2e:
		m.rol(m.fetch16())
	case 0x30:
		if m.P&FN != 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0x31:
		m.A &= m.indy()
		m.nz(m.A)
	case 0x35:
		m.A &= m.zpx()
		m.nz(m.A)
	case 0x36:
		m.rol(m.azpx(m.X))
	case 0x38:
		m.P |= FC
		m.memread(m.PC)
	case 0x39:
		m.A &= m.absy()
		m.nz(m.A)
	case 0x3e:
		m.rol(m.aabsx(m.X, 1))
	case 0x3d:
		m.A &= m.absx()
		m.nz(m.A)
	case 0x40:
		m.fetch8()
		m.memread(uint16(m.S) | 0x100)
		m.P = m.pop8() & 0xcf
		m.PC = m.pop16()
	case 0x41:
		m.A ^= m.indx()
		m.nz(m.A)
	case 0x45:
		m.A ^= m.zp()
		m.nz(m.A)
	case 0x46:
		m.lsr(uint16(m.fetch8()))
	case 0x48:
		m.memread(m.PC)
		m.push8(m.A)
	case 0x49:
		m.A ^= m.imm()
		m.nz(m.A)
	case 0x4a:
		m.P &^= (FN | FZ | FC)
		m.P |= m.A & 1
		m.A >>= 1
		if m.A == 0 {
			m.P |= FZ
		}
		if m.A&0x80 != 0 {
			m.P |= FN
		}
		m.memread(m.PC)
	case 0x4c:
		m.PC = m.fetch16()
	case 0x4d:
		m.A ^= m.abso()
		m.nz(m.A)
	case 0x4e:
		m.lsr(m.fetch16())
	case 0x51:
		m.A ^= m.indy()
		m.nz(m.A)
	case 0x56:
		m.lsr(m.azpx(m.X))
	case 0x58:
		m.P &^= FI
		m.memread(m.PC)
	case 0x50:
		if m.P&FV == 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0x55:
		m.A ^= m.zpx()
		m.nz(m.A)
	case 0x59:
		m.A ^= m.absy()
		m.nz(m.A)
	case 0x5d:
		m.A ^= m.absx()
		m.nz(m.A)
	case 0x5e:
		m.lsr(m.aabsx(m.X, 1))
	case 0x60:
		m.fetch8()
		m.memread(uint16(m.S) | 0x100)
		m.PC = m.pop16()
		m.fetch8()
	case 0x61:
		m.adc(m.indx())
	case 0x65:
		m.adc(m.zp())
	case 0x66:
		m.ror(uint16(m.fetch8()))
	case 0x68:
		m.memread(m.PC)
		m.memread(0x100 | uint16(m.S))
		m.A = m.pop8()
		m.nz(m.A)
	case 0x69:
		m.adc(m.imm())
	case 0x6a:
		a := m.P & FC
		m.P &^= (FC | FN | FZ)
		m.P |= m.A & 1
		m.A = (m.A >> 1) | (a << 7)
		if m.A&0x80 != 0 {
			m.P |= FN
		}
		if m.A == 0 {
			m.P |= FZ
		}
		m.memread(m.PC)
	case 0x6c:
		v := m.fetch16()
		m.PC = uint16(m.memread(v)) | uint16(m.memread(v&0xff00)) | uint16(uint8(v+1))<<8
	case 0x6d:
		m.adc(m.abso())
	case 0x6e:
		m.ror(m.fetch16())
	case 0x70:
		if m.P&FV != 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0x71:
		m.adc(m.indy())
	case 0x75:
		m.adc(m.zpx())
	case 0x76:
		m.ror(m.azpx(m.X))
	case 0x78:
		m.P |= FI
		m.memread(m.PC)
	case 0x79:
		m.adc(m.absy())
	case 0x7d:
		m.adc(m.absx())
	case 0x7e:
		m.ror(m.aabsx(m.X, 1))
	case 0x81:
		m.memwrite(m.aindx(), m.A)
	case 0x84:
		m.memwrite(uint16(m.fetch8()), m.Y)
	case 0x85:
		m.memwrite(uint16(m.fetch8()), m.A)
	case 0x86:
		m.memwrite(uint16(m.fetch8()), m.X)
	case 0x88:
		m.Y--
		m.nz(m.Y)
		m.memread(m.PC)
	case 0x8a:
		m.A = m.X
		m.nz(m.A)
		m.memread(m.PC)
	case 0x8c:
		m.memwrite(m.fetch16(), m.Y)
	case 0x8d:
		m.memwrite(m.fetch16(), m.A)
	case 0x8e:
		m.memwrite(m.fetch16(), m.X)
	case 0x90:
		if m.P&FC == 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0x91:
		m.memwrite(m.aindy(1), m.A)
	case 0x94:
		m.memwrite(m.azpx(m.X), m.Y)
	case 0x95:
		m.memwrite(m.azpx(m.X), m.A)
	case 0x96:
		m.memwrite(m.azpx(m.Y), m.X)
	case 0x98:
		m.A = m.Y
		m.nz(m.A)
		m.memread(m.PC)
	case 0x99:
		m.memwrite(m.aabsx(m.Y, 1), m.A)
	case 0x9a:
		m.S = m.X
		m.memread(m.PC)
	case 0x9d:
		m.memwrite(m.aabsx(m.X, 1), m.A)
	case 0xa0:
		m.Y = m.imm()
		m.nz(m.Y)
	case 0xa1:
		m.A = m.indx()
		m.nz(m.A)
	case 0xa2:
		m.X = m.imm()
		m.nz(m.X)
	case 0xa4:
		m.Y = m.zp()
		m.nz(m.Y)
	case 0xa5:
		m.A = m.zp()
		m.nz(m.A)
	case 0xa6:
		m.X = m.zp()
		m.nz(m.X)
	case 0xa8:
		m.Y = m.A
		m.nz(m.Y)
		m.memread(m.PC)
	case 0xa9:
		m.A = m.imm()
		m.nz(m.A)
	case 0xaa:
		m.X = m.A
		m.nz(m.X)
		m.memread(m.PC)
	case 0xac:
		m.Y = m.abso()
		m.nz(m.Y)
	case 0xae:
		m.X = m.abso()
		m.nz(m.X)
	case 0xad:
		m.A = m.abso()
		m.nz(m.A)
	case 0xb0:
		if m.P&FC != 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0xb1:
		m.A = m.indy()
		m.nz(m.A)
	case 0xb4:
		m.Y = m.zpx()
		m.nz(m.Y)
	case 0xb5:
		m.A = m.zpx()
		m.nz(m.A)
	case 0xb6:
		m.X = m.zpy()
		m.nz(m.X)
	case 0xb8:
		m.P &^= FV
		m.memread(m.PC)
	case 0xb9:
		m.A = m.absy()
		m.nz(m.A)
	case 0xba:
		m.X = m.S
		m.nz(m.X)
		m.memread(m.PC)
	case 0xbc:
		m.Y = m.absx()
		m.nz(m.Y)
	case 0xbd:
		m.A = m.absx()
		m.nz(m.A)
	case 0xbe:
		m.X = m.absy()
		m.nz(m.X)
	case 0xc1:
		m.cmp(m.A, m.indx())
	case 0xc5:
		m.cmp(m.A, m.zp())
	case 0xc9:
		m.cmp(m.A, m.imm())
	case 0xcd:
		m.cmp(m.A, m.abso())
	case 0xd0:
		if m.P&FZ == 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0xd1:
		m.cmp(m.A, m.indy())
	case 0xd5:
		m.cmp(m.A, m.zpx())
	case 0xd8:
		m.P &^= FD
		m.memread(m.PC)
	case 0xd9:
		m.cmp(m.A, m.absy())
	case 0xdd:
		m.cmp(m.A, m.absx())
	case 0xc0:
		m.cmp(m.Y, m.imm())
	case 0xc4:
		m.cmp(m.Y, m.zp())
	case 0xc6:
		m.dec(uint16(m.fetch8()))
	case 0xc8:
		m.Y++
		m.nz(m.Y)
		m.memread(m.PC)
	case 0xca:
		m.X--
		m.nz(m.X)
		m.memread(m.PC)
	case 0xcc:
		m.cmp(m.Y, m.abso())
	case 0xce:
		m.dec(m.fetch16())
	case 0xd6:
		m.dec(m.azpx(m.X))
	case 0xde:
		m.dec(m.aabsx(m.X, 1))
	case 0xe0:
		m.cmp(m.X, m.imm())
	case 0xe1:
		m.sbc(m.indx())
	case 0xe4:
		m.cmp(m.X, m.zp())
	case 0xe5:
		m.sbc(m.zp())
	case 0xe6:
		m.inc(uint16(m.fetch8()))
	case 0xe8:
		m.X++
		m.nz(m.X)
		m.memread(m.PC)
	case 0xe9:
		m.sbc(m.imm())
	case 0xea:
		m.memread(m.PC)
	case 0xec:
		m.cmp(m.X, m.abso())
	case 0xed:
		m.sbc(m.abso())
	case 0xee:
		m.inc(m.fetch16())
	case 0xf0:
		if m.P&FZ != 0 {
			m.branch()
		} else {
			m.fetch8()
		}
	case 0xf1:
		m.sbc(m.indy())
	case 0xf5:
		m.sbc(m.zpx())
	case 0xf6:
		m.inc(m.azpx(m.X))
	case 0xf8:
		m.P |= FD
		m.memread(m.PC)
	case 0xf9:
		m.sbc(m.absy())
	case 0xfd:
		m.sbc(m.absx())
	case 0xfe:
		m.inc(m.aabsx(m.X, 1))
	default:
		panic(fmt.Errorf("unknown instruction %#x at %#x", op, curpc))
	}
}

func (m *Mach) pixel(v uint8, p uint8, s uint8) {
	if p > m.PRI {
		m.COL = v
		m.PRI = p
	}
	m.DISP |= 1 << s
}

func (m *Mach) playfield() {
	x := uint(m.PPUX / 4)
	if x >= 20 {
		if (m.R[CTRLPF] & 1) != 0 {
			x = 39 - x
		} else {
			x = x - 20
		}
	}
	if x < 4 {
		if (m.R[PF0] & (0x10 << x)) == 0 {
			return
		}
	} else if x < 12 {
		if (uint(m.R[PF1]) & (0x800 >> x)) == 0 {
			return
		}
	} else {
		if (m.R[PF2] & (1 << (x - 12))) == 0 {
			return
		}
	}

	var c, p uint8
	if (m.R[CTRLPF] & 6) == 2 {
		if m.PPUX < 80 {
			c = m.R[COLUP0]
			p = 3
		} else {
			c = m.R[COLUP1]
			p = 2
		}
	} else {
		c = m.R[COLUPF]
		p = (m.R[CTRLPF] & 4) + 1
	}
	m.pixel(c, p, SRCPF)
}

func (m *Mach) player(n uint8) {
	c := m.R[GRP0+n]
	var x int
	if n != 0 {
		x = int(m.PPUX) - int(m.P1X)
	} else {
		x = int(m.PPUX) - int(m.P0X)
	}
	if x < 0 {
		return
	}

	switch m.R[NUSIZ0+n] & 7 {
	default:
		if x >= 8 {
			return
		}
	case 1:
		if x >= 8 && (x < 16 || x >= 24) {
			return
		}
	case 2:
		if x >= 8 && (x < 32 || x >= 40) {
			return
		}
	case 3:
		if x >= 40 || ((x & 15) >= 8) {
			return
		}
	case 4:
		if x >= 8 && (x < 64 || x >= 72) {
			return
		}
	case 5:
		if x >= 16 {
			return
		}
		x >>= 1
	case 6:
		if x >= 72 || ((x & 31) >= 8) {
			return
		}
	case 7:
		if x >= 32 {
			return
		}
		x >>= 2
	}
	x &= 7
	if (m.R[REFP0+n] & 8) == 0 {
		x ^= 7
	}
	if (c & (1 << uint(x))) == 0 {
		return
	}
	c = m.R[COLUP0+n]
	m.pixel(c, 3-n, SRCP0+n)
}

func (m *Mach) missile(n uint8) {
	var x int
	if n != 0 {
		x = int(m.PPUX) - int(m.M1X)
	} else {
		x = int(m.PPUX) - int(m.M0X)
	}

	if (m.R[RESMP0+n] & 2) != 0 {
		if n != 0 {
			m.M1X = m.P1X
		} else {
			m.M0X = m.P0X
		}
		return
	}
	if x < 0 || x >= 1<<(m.R[NUSIZ0]>>4&3) || (m.R[ENAM0+n]&2) == 0 {
		return
	}
	m.pixel(m.R[COLUP0+n], 3-n, SRCM0+n)
}

func (m *Mach) ball() {
	x := int(m.PPUX) - int(m.BLX)
	if x < 0 || x >= 1<<(m.R[CTRLPF]>>4&3) || m.R[ENABL]&2 == 0 {
		return
	}
	m.pixel(m.R[COLUPF], (m.R[CTRLPF]&4)+1, SRCBL)
}

func (m *Mach) pixeldraw(v uint8) {
	var col = []uint32{
		0x000000, 0x404040, 0x6C6C6C, 0x909090, 0xB0B0B0, 0xC8C8C8, 0xDCDCDC, 0xECECEC,
		0x444400, 0x646410, 0x848424, 0xA0A034, 0xB8B840, 0xD0D050, 0xE8E85C, 0xFCFC68,
		0x702800, 0x844414, 0x985C28, 0xAC783C, 0xBC8C4C, 0xCCA05C, 0xDCB468, 0xECC878,
		0x841800, 0x983418, 0xAC5030, 0xC06848, 0xD0805C, 0xE09470, 0xECA880, 0xFCBC94,
		0x880000, 0x9C2020, 0xB03C3C, 0xC05858, 0xD07070, 0xE08888, 0xECA0A0, 0xFCB4B4,
		0x78005C, 0x8C2074, 0xA03C88, 0xB0589C, 0xC070B0, 0xD084C0, 0xDC9CD0, 0xECB0E0,
		0x480078, 0x602090, 0x783CA4, 0x8C58B8, 0xA070CC, 0xB484DC, 0xC49CEC, 0xD4B0FC,
		0x140084, 0x302098, 0x4C3CAC, 0x6858C0, 0x7C70D0, 0x9488E0, 0xA8A0EC, 0xBCB4FC,
		0x000088, 0x1C209C, 0x3840B0, 0x505CC0, 0x6874D0, 0x7C8CE0, 0x90A4EC, 0xA4B8FC,
		0x00187C, 0x1C3890, 0x3854A8, 0x5070BC, 0x6888CC, 0x7C9CDC, 0x90B4EC, 0xA4C8FC,
		0x002C5C, 0x1C4C78, 0x386890, 0x5084AC, 0x689CC0, 0x7CB4D4, 0x90CCE8, 0xA4E0FC,
		0x003C2C, 0x1C5C48, 0x387C64, 0x509C80, 0x68B494, 0x7CD0AC, 0x90E4C0, 0xA4FCD4,
		0x003C00, 0x205C20, 0x407C40, 0x5C9C5C, 0x74B474, 0x8CD08C, 0xA4E4A4, 0xB8FCB8,
		0x143800, 0x345C1C, 0x507C38, 0x6C9850, 0x84B468, 0x9CCC7C, 0xB4E490, 0xC8FCA4,
		0x2C3000, 0x4C501C, 0x687034, 0x848C4C, 0x9CA864, 0xB4C078, 0xCCD488, 0xE0EC9C,
		0x442800, 0x644818, 0x846830, 0xA08444, 0xB89C58, 0xD0B46C, 0xE8CC7C, 0xFCE08C,
	}
	c := (0xff << 24) | col[v>>1]
	p := m.PIC[m.PPUY*PICW*4*2*2+m.PPUX*4*4:]
	binary.LittleEndian.PutUint32(p[4*0:], c)
	binary.LittleEndian.PutUint32(p[4*1:], c)
	binary.LittleEndian.PutUint32(p[4*2:], c)
	binary.LittleEndian.PutUint32(p[4*3:], c)
	binary.LittleEndian.PutUint32(p[4*640:], c)
	binary.LittleEndian.PutUint32(p[4*641:], c)
	binary.LittleEndian.PutUint32(p[4*642:], c)
	binary.LittleEndian.PutUint32(p[4*643:], c)
}

func (m *Mach) tiastep() {
	var colltab = [64]uint16{
		0x0000, 0x0000, 0x0000, 0x0020, 0x0000, 0x0080, 0x8000, 0x80a0,
		0x0000, 0x0200, 0x0001, 0x0221, 0x0002, 0x0282, 0x8003, 0x82a3,
		0x0000, 0x0800, 0x0008, 0x0828, 0x0004, 0x0884, 0x800c, 0x88ac,
		0x4000, 0x4a00, 0x4009, 0x4a29, 0x4006, 0x4a86, 0xc00f, 0xcaaf,
		0x0000, 0x2000, 0x0010, 0x2030, 0x0040, 0x20c0, 0x8050, 0xa0f0,
		0x0100, 0x2300, 0x0111, 0x2331, 0x0142, 0x23c2, 0x8153, 0xa3f3,
		0x0400, 0x2c00, 0x0418, 0x2c38, 0x0444, 0x2cc4, 0x845c, 0xacfc,
		0x4500, 0x6f00, 0x4519, 0x6f39, 0x4546, 0x6fc6, 0xc55f, 0xefff,
	}
	if m.PPUY < PICH && m.PPUX < 160 {
		m.COL = m.R[COLUBK]
		m.PRI = 0
		m.DISP = 0
		m.playfield()
		m.player(0)
		m.player(1)
		m.missile(0)
		m.missile(1)
		m.ball()
		m.COLL |= colltab[m.DISP]
		m.pixeldraw(m.COL)
	}
	if m.PPUX == 160 {
		m.NRDY = 0
	}
	if m.PPUX++; m.PPUX == 228 {
		m.PPUY++
		m.PPUX = 0
	}
}

func (m *Mach) channel(i int) {
	m.SDIV[i] += HZ / 114
	for ; m.SDIV[i] >= RATE; m.SDIV[i] -= RATE {
		if m.FDIV[i] >= int32(m.R[AUDF0+i]&31) {
			m.FDIV[i] = 0
			switch m.R[AUDC0+i] & 15 {
			case 0:
				m.CH[i] = 1
			case 2:
				if m.CDIV[i]++; m.CDIV[i] < 15 {
					break
				}
				m.CDIV[i] = 0
			case 1:
				m.CH[i] = m.SR[i] & 1
				m.SR[i] = (m.SR[i]>>1)&7 | ((m.SR[i]<<2)^(m.SR[i]<<3))&8
			case 4, 5:
				m.CH[i] ^= 1
			case 12, 13:
				if m.CDIV[i]++; m.CDIV[i] < 3 {
					break
				}
				m.CDIV[i] = 0
				m.CH[i] ^= 1
			case 6, 10:
				if m.CDIV[i]++; m.CDIV[i] < 16 {
					break
				}
				m.CDIV[i] = 0
				m.CH[i] ^= 1
			case 14:
				if m.CDIV[i]++; m.CDIV[i] < 46 {
					break
				}
				m.CDIV[i] = 0
				m.CH[i] ^= 1
			case 15:
				if m.CDIV[i]++; m.CDIV[i] < 6 {
					break
				}
				m.CDIV[i] = 0
			case 7, 9:
				m.CH[i] = m.SR[i] & 1
				m.SR[i] = ((m.SR[i] >> 1) & 15) | ((m.SR[i]<<2)^(m.SR[i]<<4))&16
			case 8:
				m.CH[i] = m.SR[i] & 1
				m.SR[i] = (m.SR[i]>>1)&255 | ((m.SR[i]<<4)^(m.SR[i]<<8))&256
			case 3:
				m.CH[i] = m.SR[i] & 1
				m.SR[i] = m.SR[i]&15 | (m.SR[i]>>1)&240 | ((m.SR[i]<<2)^(m.SR[i]^3))&256
				if m.SR[i]&256 != 0 {
					m.SR[i] = m.SR[i]&496 | (m.SR[i]>>1)&7 | ((m.SR[i]<<2)^(m.SR[i]<<3))&8
				}
			}
		} else {
			m.FDIV[i]++
		}
	}
}

func (m *Mach) sample() {
	var sbuf [4]uint8
	m.channel(0)
	m.channel(1)
	d := m.CH[0]*int32(m.R[AUDV0]&15) + m.CH[1]*int32(m.R[AUDV1]&15)
	d *= 1000
	binary.LittleEndian.PutUint16(sbuf[0:], uint16(d))
	binary.LittleEndian.PutUint16(sbuf[2:], uint16(d))
	audev.QueueAudio(sbuf[:4])
}

func (m *Mach) flush() {
	copy(pixels[(480-PICH*2)*PICW*4:], m.PIC[:PICW*PICH*4*4])
	renderer.SetDrawColor(sdlcolor.Black)
	renderer.Clear()
	texture.Update(nil, pixels[:], SCRW*4)
	renderer.Copy(texture, nil, nil)
	renderer.Present()

	for {
		ev := sdl.PollEvent()
		if ev == nil {
			break
		}
		switch ev := ev.(type) {
		case sdl.QuitEvent:
			os.Exit(0)
		case sdl.KeyDownEvent:
			switch ev.Sym {
			case sdl.K_ESCAPE:
				os.Exit(0)
			case sdl.K_UP:
				m.KEYS |= 1 << 0
			case sdl.K_DOWN:
				m.KEYS |= 1 << 1
			case sdl.K_LEFT:
				m.KEYS |= 1 << 2
			case sdl.K_RIGHT:
				m.KEYS |= 1 << 3
			case sdl.K_RETURN:
				m.KEYS |= 1 << 5
			case sdl.K_TAB:
				m.KEYS |= 1 << 6
			case sdl.K_SPACE:
				m.KEYS |= 1 << 4
			case sdl.K_1:
				if saveslot > 0 {
					saveslot--
				}
				log.Println("Save Slot:", saveslot)
			case sdl.K_2:
				if saveslot < 10 {
					saveslot++
				}
				log.Println("Save Slot:", saveslot)
			case sdl.K_F2:
				saveState()
			case sdl.K_F4:
				loadState()
			}
		case sdl.KeyUpEvent:
			switch ev.Sym {
			case sdl.K_UP:
				m.KEYS &^= 1 << 0
			case sdl.K_DOWN:
				m.KEYS &^= 1 << 1
			case sdl.K_LEFT:
				m.KEYS &^= 1 << 2
			case sdl.K_RIGHT:
				m.KEYS &^= 1 << 3
			case sdl.K_RETURN:
				m.KEYS &^= 1 << 5
			case sdl.K_TAB:
				m.KEYS &^= 1 << 6
			case sdl.K_SPACE:
				m.KEYS &^= 1 << 4
			}
		}
	}
}

// The code below is SPACE INVADERS, Copyright 1980 Atari, Inc.
var rom = [4096]uint8{
	0x85, 0x2b, 0xa5, 0x84, 0x30, 0x00, 0x29, 0x0f, 0xaa, 0xca, 0x10, 0xfd, 0xb1, 0xf8, 0xaa,
	0xb1, 0xee, 0x85, 0x1b, 0xb1, 0xf0, 0x85, 0x1c, 0xb1, 0xf2, 0x85, 0x1b, 0xb1, 0xf4, 0x85,
	0x1c, 0xb1, 0xf6, 0x85, 0x1b, 0x8a, 0x85, 0x1c, 0x85, 0x1b, 0xc6, 0x89, 0x88, 0x48, 0x68,
	0x48, 0x68, 0xb1, 0xf8, 0xaa, 0xb1, 0xee, 0x85, 0x1b, 0xb1, 0xf0, 0x85, 0x1c, 0xb1, 0xf2,
	0x85, 0x1b, 0xb1, 0xf4, 0x85, 0x1c, 0xb1, 0xf6, 0x85, 0x1b, 0x8a, 0x85, 0x1c, 0x85, 0x1b,
	0xa5, 0x89, 0xc9, 0x04, 0x90, 0x04, 0xa9, 0x00, 0xb0, 0x03, 0xea, 0xa9, 0x02, 0x8d, 0x1f,
	0x00, 0x88, 0x10, 0xae, 0xc8, 0x84, 0x1b, 0x84, 0x1c, 0x84, 0x2b, 0x84, 0x1b, 0x84, 0x1c,
	0x85, 0x02, 0xc6, 0x89, 0xa5, 0x89, 0xc9, 0x04, 0x90, 0x04, 0xa9, 0x00, 0xb0, 0x03, 0xea,
	0xa9, 0x02, 0x85, 0x1f, 0xa4, 0x80, 0xa5, 0x02, 0x05, 0x03, 0x0a, 0x30, 0x06, 0xea, 0xea,
	0xea, 0xea, 0x10, 0x07, 0xa5, 0x82, 0x19, 0xdc, 0xfc, 0x85, 0x82, 0x85, 0x2c, 0x88, 0xc6,
	0x8c, 0x10, 0x09, 0xa9, 0x00, 0x85, 0x25, 0x85, 0x26, 0x4c, 0x09, 0xf1, 0x20, 0xe9, 0xfd,
	0x84, 0x80, 0xb9, 0x92, 0x00, 0x85, 0xf8, 0xa2, 0xf4, 0x46, 0xf8, 0x90, 0x07, 0xb9, 0xd6,
	0xfc, 0x65, 0x8b, 0xd0, 0x04, 0x48, 0x68, 0xa9, 0x00, 0x95, 0xfa, 0xe8, 0xe8, 0x30, 0xeb,
	0xc6, 0x89, 0xa5, 0x89, 0xc9, 0x04, 0x90, 0x04, 0xa9, 0x00, 0xb0, 0x03, 0xea, 0xa9, 0x02,
	0x85, 0x1f, 0xa5, 0xc8, 0x29, 0x38, 0x4a, 0x4a, 0x4a, 0xc5, 0x80, 0xd0, 0x16, 0xa5, 0xc8,
	0x29, 0x07, 0x0a, 0xaa, 0xa5, 0xc8, 0x2a, 0x2a, 0x2a, 0x29, 0x03, 0xa8, 0xb9, 0x1e, 0xfd,
	0x95, 0xee, 0x4c, 0xfa, 0xf0, 0xa2, 0x05, 0xca, 0x10, 0xfd, 0x85, 0x2b, 0x20, 0xb2, 0xfd,
	0xa2, 0x06, 0xca, 0x10, 0xfd, 0xa0, 0x09, 0x4c, 0x00, 0xf0, 0xc6, 0x8e, 0x30, 0x06, 0x20,
	0xb2, 0xfd, 0x4c, 0x09, 0xf1, 0x24, 0x98, 0x70, 0x03, 0x4c, 0xb2, 0xf1, 0xa5, 0xdd, 0x85,
	0x06, 0xa9, 0x01, 0x85, 0x8e, 0xa9, 0x00, 0x85, 0xef, 0x85, 0xf1, 0x85, 0xf3, 0xa9, 0xab,
	0x85, 0xee, 0xa9, 0xb4, 0x85, 0xf0, 0xa9, 0xbd, 0x85, 0xf2, 0xa9, 0x11, 0x85, 0x02, 0x85,
	0x2b, 0x85, 0xf4, 0xa5, 0x85, 0x85, 0x20, 0x29, 0x0f, 0xa8, 0x88, 0x10, 0xfd, 0x85, 0x10,
	0xc6, 0x89, 0xa5, 0x89, 0xc9, 0x04, 0xa9, 0x02, 0x90, 0x01, 0x4a, 0x85, 0x1f, 0x85, 0x02,
	0x85, 0x2a, 0xa0, 0x00, 0xa5, 0x85, 0x10, 0x02, 0xa5, 0x85, 0x29, 0x0f, 0xaa, 0xca, 0xca,
	0xca, 0x10, 0xfd, 0xb1, 0xee, 0x85, 0x1b, 0xea, 0xb1, 0xf0, 0x85, 0x1b, 0xb1, 0xf2, 0x85,
	0x1b, 0xc6, 0xf4, 0x30, 0x12, 0xa5, 0xf4, 0x4a, 0x90, 0x08, 0xc8, 0xa9, 0x20, 0x4a, 0xd0,
	0xfd, 0xf0, 0xe2, 0x20, 0xe9, 0xfd, 0x10, 0xdd, 0xa9, 0x00, 0x85, 0x1b, 0x85, 0x02, 0xa5,
	0x02, 0x0a, 0x29, 0x80, 0x05, 0x82, 0x85, 0x82, 0x85, 0x2c, 0x20, 0xe9, 0xfd, 0x85, 0x2b,
	0x85, 0x02, 0x85, 0x02, 0xc6, 0x8e, 0x30, 0x06, 0x20, 0xb2, 0xfd, 0x4c, 0xa8, 0xf1, 0x24,
	0x98, 0x10, 0x03, 0x4c, 0x82, 0xf2, 0x20, 0xe9, 0xfd, 0x85, 0x2b, 0x85, 0x02, 0xa5, 0xdf,
	0x85, 0x06, 0xa5, 0x86, 0x85, 0x20, 0x29, 0x0f, 0xa8, 0x88, 0x10, 0xfd, 0x85, 0x10, 0x85,
	0x02, 0xa5, 0xe0, 0x85, 0x07, 0xa5, 0x87, 0x85, 0x21, 0x29, 0x0f, 0xa8, 0x88, 0x10, 0xfd,
	0x85, 0x11, 0x85, 0x02, 0x85, 0x2a, 0x20, 0xe9, 0xfd, 0xa9, 0x00, 0x2c, 0x82, 0x02, 0x10,
	0x02, 0xa9, 0x05, 0x85, 0x05, 0xa9, 0x00, 0x50, 0x02, 0xa9, 0x05, 0x85, 0x04, 0xa5, 0x98,
	0x29, 0x10, 0xf0, 0x02, 0xa9, 0x0a, 0x85, 0xf4, 0xa5, 0x98, 0x29, 0x20, 0xf0, 0x02, 0xa9,
	0x0a, 0x85, 0xf6, 0xa5, 0xaa, 0x4a, 0x85, 0x02, 0x90, 0x17, 0xa6, 0xc9, 0xbd, 0x16, 0xfd,
	0x85, 0xf8, 0xa9, 0xff, 0x85, 0xf9, 0xa5, 0xca, 0x29, 0x08, 0xd0, 0x04, 0x85, 0xf4, 0x85,
	0xf6, 0x10, 0x25, 0xa9, 0x00, 0x85, 0xf8, 0xa5, 0xca, 0x4a, 0x4a, 0x4a, 0xa5, 0xaa, 0x29,
	0x04, 0xf0, 0x08, 0xa9, 0x1e, 0xb0, 0x02, 0xa9, 0x14, 0x85, 0xf4, 0xa5, 0xaa, 0x29, 0x02,
	0xf0, 0x08, 0xa9, 0x14, 0xb0, 0x02, 0xa9, 0x1e, 0x85, 0xf6, 0xa2, 0x09, 0xa0, 0x09, 0x85,
	0x02, 0xa9, 0x00, 0x85, 0x0d, 0xb1, 0xf4, 0x85, 0x1b, 0xb1, 0xf6, 0x85, 0x1c, 0x8a, 0x4a,
	0xa8, 0xb1, 0xf8, 0x85, 0x0d, 0x8a, 0x4a, 0x90, 0x0d, 0xc6, 0x89, 0xa5, 0x89, 0xc9, 0x04,
	0xa9, 0x02, 0x90, 0x01, 0x4a, 0x85, 0x1f, 0xca, 0x8a, 0xa8, 0x10, 0xd5, 0x85, 0x02, 0xa9,
	0x00, 0x85, 0x04, 0x85, 0x05, 0x85, 0x0d, 0x85, 0x1f, 0x85, 0x1b, 0x85, 0x1c, 0xa5, 0xe4,
	0x85, 0x09, 0xa5, 0x81, 0x85, 0x10, 0xa2, 0x04, 0xca, 0x10, 0xfd, 0x85, 0x11, 0x85, 0x2b,
	0xa9, 0xe0, 0x85, 0x21, 0x85, 0x02, 0x85, 0x2a, 0xa9, 0xc0, 0x85, 0x1b, 0x85, 0x1c, 0xa2,
	0x04, 0xa9, 0x00, 0x95, 0xf3, 0xca, 0xd0, 0xfb, 0x20, 0x08, 0xfe, 0xe8, 0x20, 0x08, 0xfe,
	0xa5, 0xaa, 0x29, 0x81, 0xd0, 0x2f, 0x24, 0x02, 0x50, 0x06, 0xa9, 0x04, 0x24, 0xaa, 0xf0,
	0x0b, 0xca, 0x24, 0x03, 0x50, 0x20, 0xa9, 0x02, 0x24, 0xaa, 0xd0, 0x1a, 0x05, 0xaa, 0x85,
	0xaa, 0x85, 0xc6, 0x20, 0x75, 0xfe, 0xa9, 0x06, 0x20, 0x7e, 0xfe, 0xa5, 0xc7, 0xd0, 0x08,
	0x24, 0xdb, 0x50, 0x04, 0xa9, 0x02, 0x95, 0xf4, 0x85, 0x02, 0xad, 0x84, 0x02, 0xd0, 0xfb,
	0x85, 0x1b, 0x85, 0x1c, 0xa9, 0xc8, 0x8d, 0x95, 0x02, 0xa9, 0x00, 0x85, 0xf1, 0xaa, 0xa5,
	0x82, 0x10, 0x5f, 0xa5, 0xca, 0x4a, 0x90, 0x02, 0xa2, 0x04, 0xb5, 0xd1, 0xc9, 0x49, 0x90,
	0x04, 0xc9, 0x58, 0x90, 0x01, 0xe8, 0xe0, 0x03, 0x90, 0x0c, 0xa9, 0x09, 0x85, 0xef, 0xa9,
	0xff, 0x85, 0xf2, 0xa9, 0x7f, 0xd0, 0x0a, 0xa9, 0xff, 0x85, 0xef, 0xa9, 0x01, 0x85, 0xf2,
	0xa9, 0xf6, 0x95, 0xd1, 0xb5, 0xd3, 0xa0, 0x03, 0x18, 0xe5, 0x9b, 0x88, 0x18, 0x69, 0xe0,
	0x10, 0xfa, 0x69, 0x20, 0xaa, 0xb9, 0x13, 0xfd, 0x85, 0xf0, 0xa4, 0xef, 0x98, 0x18, 0x65,
	0xf2, 0xa8, 0xbd, 0x4c, 0xff, 0x49, 0xff, 0x31, 0xf0, 0xf0, 0xf2, 0x20, 0x8f, 0xfd, 0x88,
	0x20, 0x8b, 0xfd, 0xc8, 0xc8, 0x20, 0x8b, 0xfd, 0xa5, 0xca, 0x4a, 0xb0, 0x03, 0x4c, 0x29,
	0xf4, 0x24, 0x82, 0x50, 0x26, 0xa5, 0xc8, 0x29, 0x39, 0xc9, 0x39, 0xf0, 0x1e, 0xa9, 0x39,
	0x85, 0xc8, 0xa2, 0x01, 0xa5, 0x98, 0x29, 0x04, 0xd0, 0x01, 0xca, 0xa9, 0x04, 0x85, 0xc6,
	0x4a, 0x24, 0xdb, 0x50, 0x01, 0x4a, 0x95, 0xf4, 0xa9, 0x05, 0x20, 0x8b, 0xfe, 0xa9, 0x06,
	0x85, 0xf0, 0xc6, 0xf0, 0x10, 0x03, 0x4c, 0xcf, 0xf4, 0xa6, 0xf0, 0xa5, 0x82, 0x3d, 0xdc,
	0xfc, 0xf0, 0xf0, 0xa0, 0x01, 0xa9, 0x35, 0x38, 0xfd, 0x31, 0xfd, 0x18, 0x65, 0x90, 0xc9,
	0x52, 0xb0, 0x63, 0xc5, 0xd5, 0xb0, 0x07, 0x69, 0x0d, 0xc5, 0xd5, 0x90, 0x01, 0x88, 0x84,
	0xee, 0xa6, 0xee, 0xa0, 0xff, 0xa5, 0x9a, 0x18, 0x69, 0xfd, 0xc8, 0x69, 0x10, 0xd5, 0xd7,
	0x90, 0xf9, 0x84, 0xef, 0xa6, 0xf0, 0xb9, 0xdc, 0xfc, 0x35, 0x92, 0xf0, 0x3b, 0x55, 0x92,
	0x95, 0x92, 0xa4, 0xee, 0xb9, 0xde, 0xfc, 0xa0, 0x01, 0x25, 0x98, 0xd0, 0x01, 0x88, 0xbd,
	0x2b, 0xfd, 0x99, 0xf6, 0x00, 0xa9, 0x02, 0x20, 0x7e, 0xfe, 0xc6, 0x91, 0xd0, 0x0a, 0xa5,
	0xaa, 0x09, 0x08, 0x85, 0xaa, 0xa9, 0x61, 0x85, 0xca, 0x20, 0xed, 0xfb, 0x8a, 0x0a, 0x0a,
	0x0a, 0x05, 0xef, 0x85, 0xc8, 0xa9, 0xf6, 0xa4, 0xee, 0x99, 0xd5, 0x00, 0x4c, 0xa4, 0xf3,
	0x4a, 0xb0, 0x2d, 0xa5, 0xc8, 0x29, 0x39, 0xc9, 0x39, 0xf0, 0x25, 0xa5, 0x9e, 0xc9, 0xb4,
	0xf0, 0x1f, 0xa5, 0x98, 0x4a, 0xb0, 0x06, 0xc6, 0x9e, 0xd0, 0x16, 0xf0, 0x08, 0xe6, 0x9e,
	0xa5, 0x9e, 0xc9, 0x98, 0x90, 0x0c, 0xa9, 0xb4, 0x85, 0x9e, 0xa9, 0x00, 0x85, 0xcc, 0xa9,
	0x04, 0x85, 0xc6, 0xad, 0x80, 0x02, 0xa8, 0x0a, 0x0a, 0x0a, 0x0a, 0x85, 0xee, 0x29, 0x80,
	0x85, 0x81, 0xa5, 0xdb, 0xc9, 0x90, 0xd0, 0x08, 0x24, 0xaa, 0x50, 0x0e, 0xa4, 0xee, 0x70,
	0x0a, 0x29, 0x02, 0xf0, 0x06, 0x98, 0x29, 0x40, 0x05, 0x81, 0xa8, 0xa2, 0x01, 0xa5, 0xaa,
	0x3d, 0x60, 0xfd, 0xd0, 0x18, 0x24, 0xee, 0x30, 0x02, 0xf6, 0x9c, 0x70, 0x02, 0xd6, 0x9c,
	0xb5, 0x9c, 0xc9, 0x76, 0x90, 0x02, 0xd6, 0x9c, 0xc9, 0x23, 0xb0, 0x02, 0xf6, 0x9c, 0x84,
	0xee, 0xca, 0x10, 0xdc, 0xa5, 0xca, 0x4a, 0x4a, 0x4a, 0xb0, 0x23, 0xa5, 0xdc, 0x4a, 0x90,
	0x1e, 0xa5, 0xaa, 0x29, 0x10, 0xf0, 0x0a, 0xe6, 0x9b, 0xa5, 0x9b, 0xc9, 0x35, 0x90, 0x10,
	0xb0, 0x08, 0xc6, 0x9b, 0xa5, 0x9b, 0xc9, 0x21, 0xb0, 0x06, 0xa5, 0xaa, 0x49, 0x10, 0x85,
	0xaa, 0xad, 0x84, 0x02, 0xd0, 0xfb, 0xa9, 0x02, 0x85, 0x01, 0x85, 0x02, 0x24, 0xaa, 0x30,
	0x13, 0xf8, 0xa2, 0x01, 0xb5, 0xe8, 0x18, 0x75, 0xf6, 0x95, 0xe8, 0xb5, 0xe6, 0x75, 0xf4,
	0x95, 0xe6, 0xca, 0x10, 0xf0, 0xd8, 0x85, 0x02, 0xa5, 0xca, 0x29, 0x07, 0xd0, 0x12, 0xa5,
	0xc8, 0x18, 0x69, 0x40, 0x85, 0xc8, 0xc9, 0x40, 0xb0, 0x07, 0x20, 0xf1, 0xfb, 0xa9, 0x30,
	0x85, 0xc8, 0xa9, 0x02, 0x85, 0x02, 0x85, 0x00, 0x85, 0x02, 0x85, 0x02, 0xa9, 0x30, 0x8d,
	0x96, 0x02, 0xa9, 0x00, 0x85, 0x02, 0x85, 0x00, 0xa5, 0xca, 0x4a, 0x90, 0x23, 0xa2, 0x01,
	0xb5, 0xd5, 0xc9, 0x79, 0xd0, 0x04, 0xa9, 0xf6, 0x95, 0xd5, 0xb5, 0xd5, 0xc9, 0xec, 0xb0,
	0x0c, 0xb5, 0xd5, 0x69, 0xfe, 0xc9, 0x03, 0xb0, 0x02, 0xa9, 0xf6, 0x95, 0xd5, 0xca, 0x10,
	0xe1, 0x30, 0x59, 0xa5, 0xca, 0x29, 0x0f, 0xc9, 0x0f, 0xf0, 0x05, 0x20, 0xfb, 0xfd, 0x85,
	0xda, 0xa5, 0xdc, 0x29, 0x04, 0x4a, 0x4a, 0x4a, 0xa9, 0x01, 0xaa, 0x90, 0x01, 0x0a, 0x85,
	0x81, 0xb5, 0xd1, 0xc9, 0xec, 0xb0, 0x34, 0xa5, 0xdc, 0x29, 0x02, 0xf0, 0x1f, 0xa5, 0xda,
	0xe0, 0x00, 0xf0, 0x02, 0x0a, 0x0a, 0x0a, 0x90, 0x14, 0x10, 0x0a, 0xb5, 0xd3, 0xc9, 0x81,
	0xb0, 0x0c, 0xf6, 0xd3, 0xd0, 0x08, 0xb5, 0xd3, 0xc9, 0x17, 0x90, 0x02, 0xd6, 0xd3, 0xb5,
	0xd1, 0x18, 0x65, 0x81, 0x95, 0xd1, 0xc9, 0x6c, 0x90, 0x04, 0xa9, 0xf6, 0x95, 0xd1, 0xca,
	0x10, 0xc3, 0xc6, 0xca, 0xf0, 0x03, 0x4c, 0x8c, 0xf6, 0xa5, 0xc7, 0xf0, 0x04, 0xe6, 0xc7,
	0xe6, 0xc7, 0x24, 0xe5, 0x30, 0x6d, 0xa5, 0xaa, 0x29, 0x08, 0xf0, 0x2a, 0x45, 0xaa, 0x85,
	0xaa, 0xa6, 0x99, 0xbd, 0x0f, 0xfd, 0x85, 0x90, 0xe0, 0x03, 0xb0, 0x02, 0xe6, 0x99, 0x24,
	0x98, 0x30, 0x0f, 0x20, 0xfa, 0xfe, 0xa5, 0xaa, 0x29, 0x06, 0xd0, 0x0c, 0xa5, 0xaa, 0x09,
	0x01, 0x85, 0xaa, 0xa9, 0x40, 0x85, 0xca, 0xd0, 0x3a, 0x24, 0x98, 0x10, 0x0e, 0x24, 0xa7,
	0x30, 0x22, 0xa5, 0xdb, 0xc9, 0x10, 0xd0, 0x1c, 0xa9, 0x00, 0xf0, 0x31, 0xa5, 0xaa, 0x29,
	0x01, 0xf0, 0x25, 0x45, 0xaa, 0x85, 0xaa, 0xa9, 0x50, 0x85, 0xd9, 0xa9, 0x05, 0x85, 0xc6,
	0xa5, 0xc9, 0xd0, 0x4f, 0xe6, 0xc9, 0xa5, 0xe5, 0x09, 0x80, 0x85, 0xe5, 0xa5, 0xc7, 0xd0,
	0x09, 0xa9, 0xbf, 0x85, 0xc7, 0x10, 0x03, 0x4c, 0x89, 0xf6, 0xa5, 0xaa, 0x29, 0x06, 0xf0,
	0x40, 0x09, 0x01, 0x45, 0xaa, 0x85, 0xaa, 0xa9, 0x23, 0x85, 0x9c, 0xa9, 0x75, 0x85, 0x9d,
	0xa5, 0xdb, 0xc9, 0x10, 0xd0, 0x1e, 0x24, 0xa7, 0x30, 0x1a, 0xa2, 0x0a, 0xb4, 0x90, 0xb5,
	0x9f, 0x95, 0x90, 0x94, 0x9f, 0xca, 0x10, 0xf5, 0x20, 0x3a, 0xff, 0xa5, 0xaa, 0x49, 0x40,
	0x85, 0xaa, 0x29, 0x40, 0xd0, 0x02, 0xc6, 0xc9, 0xa9, 0x40, 0x85, 0xca, 0xa9, 0xb4, 0x85,
	0x9e, 0xa9, 0x00, 0x85, 0xcc, 0xc6, 0xc6, 0xd0, 0x1d, 0xa5, 0x91, 0xc9, 0x07, 0x90, 0x17,
	0x20, 0xfb, 0xfd, 0x29, 0x01, 0x45, 0x98, 0x85, 0x98, 0x4a, 0xa9, 0x98, 0x90, 0x02, 0xa9,
	0x00, 0x85, 0x9e, 0xa9, 0x04, 0x20, 0x8b, 0xfe, 0x4c, 0x75, 0xf8, 0xa5, 0xca, 0x4a, 0xb0,
	0x03, 0x4c, 0xdb, 0xf7, 0xad, 0x82, 0x02, 0x29, 0x03, 0xc9, 0x02, 0xd0, 0x06, 0x20, 0xb2,
	0xfe, 0x4c, 0x44, 0xf7, 0xad, 0x82, 0x02, 0x29, 0x02, 0xf0, 0x09, 0xa5, 0xaa, 0x85, 0xed,
	0x30, 0x3e, 0x4c, 0x47, 0xf7, 0xa9, 0xb1, 0x85, 0xc7, 0x24, 0xaa, 0x30, 0x0e, 0xa5, 0xaa,
	0x29, 0xb0, 0x09, 0x80, 0x85, 0xed, 0x20, 0xc0, 0xfe, 0x4c, 0x44, 0xf7, 0xe6, 0xed, 0xa5,
	0xed, 0xc9, 0x0f, 0x90, 0x1d, 0xad, 0x82, 0x02, 0x4a, 0xa9, 0x0d, 0x90, 0x02, 0xa9, 0x02,
	0x85, 0xed, 0xa5, 0x98, 0x29, 0xf3, 0x85, 0x98, 0xa5, 0xdc, 0x18, 0x69, 0x91, 0xf0, 0x02,
	0x69, 0x70, 0x85, 0xdc, 0xa5, 0xaa, 0x09, 0x80, 0x85, 0xaa, 0xa5, 0xdc, 0x4a, 0x4a, 0x4a,
	0x4a, 0x85, 0xec, 0xa8, 0xb9, 0x4b, 0xfd, 0x85, 0xdb, 0xa5, 0x98, 0x29, 0xcf, 0x19, 0x52,
	0xfd, 0x85, 0x98, 0xa9, 0xaa, 0x85, 0xe7, 0xa9, 0xa2, 0x85, 0xe9, 0xa0, 0x00, 0x98, 0x38,
	0x65, 0xdc, 0xc9, 0x0a, 0x90, 0x06, 0xc8, 0xe9, 0x0a, 0x4c, 0x19, 0xf7, 0x79, 0x39, 0xfd,
	0x85, 0xe8, 0xa5, 0xdc, 0xc9, 0x63, 0xa9, 0xaa, 0x90, 0x02, 0xa9, 0xa1, 0x85, 0xe6, 0xa5,
	0xdc, 0xc9, 0x10, 0xb0, 0x02, 0xc6, 0xe9, 0xc9, 0x09, 0xb0, 0x04, 0x69, 0xa1, 0x85, 0xe8,
	0x4c, 0x75, 0xf8, 0xa5, 0xca, 0x4a, 0xb0, 0x03, 0x4c, 0xdb, 0xf7, 0xa5, 0xc7, 0xd0, 0xf9,
	0x24, 0x98, 0x30, 0x12, 0xa5, 0xaa, 0x29, 0x07, 0xd0, 0x0c, 0xa5, 0xdb, 0x29, 0x10, 0xf0,
	0x58, 0xa5, 0xd5, 0xc9, 0xec, 0xb0, 0x03, 0x4c, 0xd8, 0xf7, 0xa5, 0xdb, 0xc9, 0x14, 0xf0,
	0x08, 0xc9, 0x90, 0xd0, 0x09, 0x24, 0xaa, 0x50, 0x21, 0x24, 0x0d, 0x4c, 0x9d, 0xf7, 0xa5,
	0xdb, 0x10, 0x0a, 0xc6, 0xd9, 0xd0, 0x06, 0x24, 0xaa, 0x50, 0x14, 0x70, 0x1e, 0x24, 0xaa,
	0x70, 0x16, 0xa5, 0xdb, 0x29, 0x20, 0xf0, 0x04, 0x24, 0x0d, 0x10, 0x04, 0x24, 0x0c, 0x30,
	0x39, 0xa5, 0x98, 0x29, 0xfb, 0xa2, 0x00, 0x10, 0x0a, 0x24, 0x0d, 0x30, 0x2d, 0xa2, 0x01,
	0xa5, 0x98, 0x09, 0x04, 0x85, 0x98, 0xa0, 0x00, 0x20, 0xaf, 0xfb, 0x4c, 0xd8, 0xf7, 0xa0,
	0x01, 0xa2, 0x01, 0xa5, 0x98, 0x39, 0xde, 0xfc, 0xd0, 0x01, 0xca, 0xb9, 0xd5, 0x00, 0xc9,
	0xec, 0x90, 0x07, 0xb5, 0x0c, 0x30, 0x03, 0x20, 0xaf, 0xfb, 0x88, 0x10, 0xe5, 0x4c, 0x75,
	0xf8, 0xa5, 0xaa, 0x29, 0x07, 0xd0, 0xf7, 0xa8, 0xa5, 0x91, 0xf0, 0xf2, 0xa9, 0xeb, 0x85,
	0xee, 0xc5, 0xd2, 0xb0, 0xea, 0x20, 0xfb, 0xfd, 0x10, 0x1a, 0x29, 0x03, 0x0a, 0x85, 0xee,
	0xa5, 0xea, 0x4a, 0x4a, 0xaa, 0x8a, 0x38, 0x65, 0xee, 0x29, 0x07, 0xaa, 0xbd, 0xdc, 0xfc,
	0x25, 0xeb, 0xf0, 0xf2, 0xd0, 0x2f, 0xa5, 0x98, 0x29, 0x04, 0xf0, 0x01, 0xc8, 0xa2, 0x05,
	0xbd, 0xdc, 0xfc, 0x25, 0xeb, 0xf0, 0x10, 0xa5, 0x9a, 0x18, 0x69, 0xfd, 0x18, 0x7d, 0x39,
	0xfd, 0xd9, 0x9c, 0x00, 0x90, 0x06, 0x86, 0xee, 0xca, 0x10, 0xe6, 0xe8, 0xa5, 0xea, 0x29,
	0x10, 0xd0, 0x05, 0xa5, 0xee, 0x30, 0x01, 0xaa, 0x86, 0xef, 0xbd, 0xdc, 0xfc, 0x85, 0xf0,
	0xa2, 0xff, 0xe8, 0xe0, 0x06, 0xb0, 0x2b, 0xb5, 0x92, 0x25, 0xf0, 0xf0, 0xf5, 0xa9, 0x3c,
	0x65, 0x90, 0xfd, 0x31, 0xfd, 0x85, 0xd2, 0x38, 0xe5, 0xd1, 0xc9, 0x10, 0x90, 0x11, 0xc9,
	0xf1, 0xb0, 0x0d, 0xa4, 0xef, 0xa5, 0x9a, 0x79, 0x39, 0xfd, 0x69, 0x04, 0x85, 0xd4, 0xd0,
	0x04, 0xa9, 0xf6, 0x85, 0xd2, 0xa5, 0xaa, 0x29, 0x07, 0xd0, 0x7a, 0x24, 0x98, 0x30, 0x76,
	0xa0, 0xff, 0xa5, 0x91, 0xf0, 0x70, 0xc8, 0xd9, 0xe4, 0xfc, 0x90, 0xfa, 0xb9, 0xf6, 0xfc,
	0x85, 0xee, 0xb9, 0xed, 0xfc, 0x85, 0xef, 0xa5, 0xca, 0x29, 0x3f, 0x85, 0xf0, 0x18, 0x65,
	0xef, 0xc9, 0x41, 0xb0, 0x53, 0xa5, 0xf0, 0xf0, 0x09, 0xc5, 0xef, 0x90, 0x4b, 0xe5, 0xef,
	0x4c, 0xa4, 0xf8, 0x24, 0x8b, 0xa9, 0x09, 0x70, 0x02, 0xa9, 0xff, 0x85, 0x8b, 0xa9, 0x01,
	0x20, 0x7e, 0xfe, 0xa5, 0x98, 0x29, 0x02, 0xf0, 0x0f, 0xa5, 0x9a, 0x18, 0x65, 0xee, 0x85,
	0x9a, 0xc5, 0x8d, 0x90, 0x26, 0xa5, 0x8d, 0xd0, 0x0d, 0xa5, 0x9a, 0x38, 0xe5, 0xee, 0x85,
	0x9a, 0xc9, 0x17, 0xb0, 0x17, 0xa9, 0x17, 0x85, 0x9a, 0xa5, 0x98, 0x49, 0x02, 0x85, 0x98,
	0x30, 0x0b, 0x24, 0xaa, 0x30, 0x07, 0xa5, 0x90, 0x18, 0x69, 0x05, 0x85, 0x90, 0xa9, 0x05,
	0x85, 0x8c, 0xa9, 0x0b, 0x38, 0xe5, 0x90, 0x85, 0x8e, 0x24, 0x98, 0x70, 0x07, 0xa5, 0x8e,
	0x18, 0x69, 0x0c, 0x85, 0x8e, 0xa2, 0xfb, 0xb5, 0x97, 0xd0, 0x0c, 0xc6, 0x8c, 0xa5, 0x8e,
	0x18, 0x69, 0x09, 0x85, 0x8e, 0xe8, 0xd0, 0xf0, 0xa5, 0x8e, 0x10, 0x31, 0xa5, 0x98, 0x29,
	0x40, 0xf0, 0x0d, 0x45, 0x98, 0x85, 0x98, 0xa5, 0x8e, 0x18, 0x69, 0x0c, 0x85, 0x8e, 0x10,
	0x1e, 0xa9, 0x00, 0x85, 0x8e, 0xa5, 0x98, 0x30, 0x16, 0x09, 0x80, 0x85, 0x98, 0xa4, 0x8c,
	0xa5, 0x90, 0x18, 0x79, 0xf2, 0xff, 0x85, 0x90, 0x20, 0x75, 0xfe, 0xa9, 0x06, 0x20, 0x7e,
	0xfe, 0xa2, 0x05, 0xa9, 0x00, 0x15, 0x92, 0xca, 0x10, 0xfb, 0x85, 0xeb, 0xa5, 0xeb, 0xf0,
	0x2d, 0x4a, 0xb0, 0x18, 0x20, 0xed, 0xfb, 0xa9, 0x3a, 0x85, 0xc8, 0xa2, 0x05, 0x56, 0x92,
	0xca, 0x10, 0xfb, 0xa5, 0x9a, 0x69, 0x10, 0x85, 0x9a, 0x46, 0xeb, 0xd0, 0xe1, 0xa2, 0x06,
	0xca, 0xbd, 0xdc, 0xfc, 0x25, 0xeb, 0xf0, 0xf8, 0xa9, 0x82, 0x38, 0xfd, 0x39, 0xfd, 0x85,
	0x8d, 0xa5, 0x90, 0x85, 0x8f, 0xa2, 0x04, 0xb5, 0x99, 0x20, 0x67, 0xfd, 0xca, 0xd0, 0xf8,
	0xad, 0x82, 0x02, 0x29, 0x08, 0xa8, 0xf0, 0x02, 0xa9, 0xf7, 0x09, 0x07, 0x85, 0xee, 0xa2,
	0xf8, 0xb9, 0xff, 0xfc, 0x45, 0xc7, 0x25, 0xee, 0x95, 0xe5, 0xc8, 0xe8, 0x30, 0xf3, 0x24,
	0xaa, 0x30, 0x04, 0xa5, 0xc7, 0xd0, 0x12, 0xa5, 0xc8, 0x29, 0x38, 0xc9, 0x30, 0xd0, 0x0a,
	0xa5, 0xdc, 0x29, 0x08, 0xf0, 0x04, 0xa5, 0xe3, 0x85, 0xe1, 0xa5, 0xde, 0x85, 0x06, 0xa5,
	0xe3, 0x85, 0x09, 0xa5, 0xe2, 0x85, 0x08, 0xa5, 0xca, 0x4a, 0xa2, 0x04, 0xb0, 0x02, 0xa2,
	0x00, 0x86, 0xef, 0xb5, 0xd1, 0xd5, 0xd2, 0x90, 0x2b, 0x85, 0x81, 0xb5, 0xd2, 0x95, 0xd1,
	0xa5, 0x81, 0x95, 0xd2, 0xb5, 0xd3, 0x85, 0x81, 0xb5, 0xd4, 0x95, 0xd3, 0xa5, 0x81, 0x95,
	0xd4, 0xa5, 0xca, 0x4a, 0x90, 0x10, 0xa5, 0x98, 0x29, 0x0c, 0x4a, 0x4a, 0xa8, 0xa5, 0x98,
	0x29, 0xf3, 0x19, 0x1a, 0xfd, 0x85, 0x98, 0xb5, 0xd4, 0xa2, 0x05, 0x20, 0x67, 0xfd, 0xa6,
	0xef, 0xb5, 0xd1, 0x85, 0x89, 0xb5, 0xd2, 0xc9, 0xec, 0xb0, 0x03, 0x38, 0xf5, 0xd1, 0x85,
	0x8a, 0xb5, 0xd3, 0xa2, 0x00, 0x20, 0x67, 0xfd, 0xa2, 0x04, 0x20, 0x7e, 0xfd, 0x85, 0x02,
	0x85, 0x2a, 0xad, 0x84, 0x02, 0xd0, 0xfb, 0x85, 0x01, 0x85, 0x2c, 0xa2, 0x00, 0xa9, 0xea,
	0x85, 0x02, 0x8d, 0x96, 0x02, 0x85, 0x2b, 0x24, 0xaa, 0x30, 0x09, 0xa5, 0x9e, 0xc9, 0xb4,
	0xf0, 0x03, 0x4c, 0x0d, 0xfb, 0xa2, 0x07, 0xa0, 0x03, 0xb9, 0xe6, 0x00, 0x29, 0x0f, 0x85,
	0xf0, 0x0a, 0x0a, 0x65, 0xf0, 0x69, 0x54, 0x95, 0xf0, 0xca, 0xb9, 0xe6, 0x00, 0x4a, 0x4a,
	0x4a, 0x4a, 0x85, 0xf0, 0x0a, 0x0a, 0x65, 0xf0, 0x69, 0x54, 0x95, 0xf0, 0xca, 0x88, 0x10,
	0xdb, 0x85, 0x02, 0xa5, 0xdf, 0x85, 0x06, 0xa9, 0x02, 0x85, 0x0a, 0xa5, 0xe0, 0x85, 0x07,
	0xa9, 0x04, 0x85, 0xee, 0xa9, 0xff, 0x85, 0xef, 0xea, 0xea, 0xa2, 0x05, 0xca, 0x10, 0xfd,
	0xa4, 0xf0, 0xb1, 0xee, 0x85, 0x0d, 0xa9, 0x00, 0x85, 0x0e, 0xa4, 0xf5, 0xb1, 0xee, 0x4a,
	0x4a, 0x4a, 0x4a, 0x85, 0x0f, 0xa4, 0xf2, 0xb1, 0xee, 0x85, 0x0d, 0xa4, 0xf7, 0xb1, 0xee,
	0x4a, 0x4a, 0x4a, 0x4a, 0x85, 0x0f, 0xa4, 0xf4, 0xb1, 0xee, 0x29, 0x0f, 0x85, 0x81, 0xa4,
	0xf1, 0xb1, 0xee, 0x0a, 0x0a, 0x0a, 0x0a, 0x05, 0x81, 0x85, 0x0e, 0xa9, 0x00, 0x85, 0x0d,
	0x85, 0x0f, 0xa4, 0xf6, 0xb1, 0xee, 0x29, 0x0f, 0x85, 0x81, 0xa4, 0xf3, 0xb1, 0xee, 0x0a,
	0x0a, 0x0a, 0x0a, 0x05, 0x81, 0x85, 0x0e, 0xc6, 0xee, 0x10, 0xaa, 0xa5, 0x89, 0x18, 0x69,
	0xf9, 0x85, 0x89, 0xa9, 0x00, 0x85, 0x0e, 0xf0, 0x48, 0x20, 0x67, 0xfd, 0x20, 0x7e, 0xfd,
	0x20, 0xe9, 0xfd, 0xa9, 0xa0, 0x85, 0xee, 0xa9, 0xfc, 0x85, 0xef, 0xa9, 0x00, 0x85, 0x04,
	0x85, 0x02, 0x85, 0x2a, 0xa5, 0xc8, 0x29, 0x39, 0xc9, 0x39, 0xd0, 0x0e, 0xa5, 0xc8, 0x2a,
	0x2a, 0x2a, 0x2a, 0x29, 0x03, 0xa8, 0xb9, 0x1e, 0xfd, 0x85, 0xee, 0x85, 0x02, 0x85, 0x2b,
	0x20, 0xe9, 0xfd, 0xa0, 0x09, 0x85, 0x02, 0xb1, 0xee, 0x85, 0x1b, 0x98, 0x4a, 0xb0, 0x03,
	0x20, 0xe9, 0xfd, 0x88, 0x10, 0xf0, 0xa9, 0x00, 0x85, 0x02, 0x85, 0x1b, 0xa5, 0x84, 0x85,
	0x21, 0x85, 0x20, 0x29, 0x0f, 0xa8, 0x88, 0x10, 0xfd, 0x85, 0x10, 0xa9, 0x06, 0x85, 0x11,
	0x85, 0x02, 0x85, 0x2a, 0x85, 0x04, 0x85, 0x05, 0xa2, 0x0a, 0xa9, 0xfc, 0x95, 0xef, 0xca,
	0xca, 0x10, 0xfa, 0x20, 0xe9, 0xfd, 0xa5, 0x02, 0x29, 0x40, 0x85, 0x82, 0x85, 0x2c, 0x85,
	0x2b, 0xa9, 0xf0, 0x85, 0x21, 0x85, 0x02, 0x85, 0x2a, 0xa5, 0xe1, 0x85, 0x06, 0x85, 0x07,
	0xc6, 0x8f, 0x10, 0x0b, 0xa0, 0x05, 0xa9, 0x01, 0x85, 0x25, 0x85, 0x26, 0x4c, 0xa5, 0xf0,
	0x20, 0xb2, 0xfd, 0x4c, 0x9a, 0xfb, 0x86, 0xf2, 0xbe, 0x38, 0xfd, 0xb5, 0xd5, 0xc9, 0x56,
	0xb0, 0x04, 0xc9, 0x45, 0xb0, 0x2e, 0xa6, 0xf2, 0xa9, 0x55, 0x99, 0xd5, 0x00, 0xbd, 0xe2,
	0xfc, 0x2d, 0x82, 0x02, 0x18, 0xf0, 0x02, 0xa9, 0x04, 0x69, 0x05, 0x75, 0x9c, 0x99, 0xd7,
	0x00, 0xa9, 0x03, 0x20, 0x8b, 0xfe, 0xa5, 0xdb, 0x29, 0x80, 0xf0, 0x0a, 0xa5, 0xaa, 0x49,
	0x40, 0x85, 0xaa, 0xa9, 0x50, 0x85, 0xd9, 0x60, 0xa5, 0xc8, 0x29, 0x39, 0xc9, 0x39, 0xd0,
	0x08, 0xa9, 0xb4, 0x85, 0x9e, 0xa9, 0x00, 0x85, 0xcc, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0xfe, 0x38, 0x38, 0x7c, 0x38,
	0x38, 0x10, 0xb6, 0xbe, 0x5d, 0x6b, 0x59, 0x63, 0x3c, 0x4c, 0x14, 0x28, 0xb6, 0xbe, 0x5d,
	0x5b, 0x24, 0x85, 0x66, 0x64, 0x28, 0x10, 0x90, 0x88, 0x88, 0x44, 0x42, 0x42, 0xff, 0xdb,
	0x5a, 0x18, 0x09, 0x11, 0x11, 0x22, 0x42, 0x42, 0xff, 0xdb, 0x7e, 0x18, 0xa5, 0xa5, 0xa5,
	0x99, 0x99, 0xa5, 0xff, 0x5a, 0x7e, 0x3c, 0x42, 0x5a, 0x5a, 0x5a, 0x99, 0xa5, 0xff, 0x5a,
	0x7e, 0x3c, 0xc3, 0x24, 0x18, 0x18, 0x18, 0x5a, 0xbd, 0xa5, 0x81, 0x81, 0x24, 0x42, 0x24,
	0xa5, 0x99, 0x99, 0xbd, 0x5a, 0x18, 0x00, 0x81, 0x42, 0x42, 0x24, 0x24, 0x3c, 0x7e, 0xeb,
	0x7e, 0x3c, 0x00, 0x24, 0x5a, 0x42, 0x24, 0x3c, 0x7e, 0xd7, 0x7e, 0x3c, 0x77, 0x44, 0x44,
	0x44, 0x5c, 0xff, 0xf3, 0xf3, 0x7e, 0x3c, 0xee, 0x22, 0x22, 0x22, 0x3a, 0xff, 0xcf, 0xcf,
	0x7e, 0x3c, 0xe7, 0x42, 0x7e, 0x7e, 0x6b, 0x3e, 0x98, 0xa4, 0x42, 0x01, 0xc6, 0x42, 0x7e,
	0x7e, 0x56, 0x7c, 0x19, 0x25, 0x42, 0x80, 0x00, 0x38, 0x7c, 0xfe, 0xfe, 0xaa, 0xfe, 0x7c,
	0x38, 0x00, 0x00, 0x00, 0x00, 0x24, 0x3c, 0x76, 0x5c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x24, 0x95, 0x48, 0xc7, 0x24, 0x90, 0x20, 0x40, 0x5d, 0xbb, 0xb6, 0x77, 0xcc, 0x2d,
	0x7e, 0xcd, 0xda, 0x6d, 0x77, 0x77, 0x82, 0x54, 0x25, 0x53, 0xc3, 0x54, 0x93, 0xa5, 0x99,
	0x81, 0x28, 0x78, 0x64, 0x50, 0x3c, 0x8c, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
	0x22, 0x16, 0x0c, 0x08, 0x05, 0x04, 0x03, 0x02, 0x00, 0x20, 0x20, 0x15, 0x15, 0x10, 0x0b,
	0x07, 0x07, 0x04, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x03, 0x04, 0x05, 0x0f, 0x0e, 0x0f,
	0x00, 0x02, 0x00, 0x04, 0x02, 0x34, 0x52, 0xcc, 0xf6, 0x14, 0x0f, 0x00, 0xe2, 0x05, 0x0a,
	0x0f, 0x14, 0xbd, 0xb4, 0xab, 0x54, 0x59, 0x5e, 0x63, 0x00, 0x08, 0x04, 0x0c, 0xaa, 0xb6,
	0xc0, 0xcc, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0xff, 0xff, 0xff, 0xc3, 0x05, 0x10, 0x15, 0x20,
	0x25, 0x30, 0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x01, 0x00, 0x10, 0x20, 0x30, 0x40,
	0x50, 0x60, 0x70, 0x80, 0x90, 0x00, 0x10, 0x8b, 0xd1, 0xbf, 0x9d, 0xd1, 0xd1, 0x18, 0x10,
	0x61, 0xd1, 0x32, 0x90, 0x14, 0x10, 0x10, 0x30, 0x30, 0x10, 0x10, 0x10, 0x00, 0x00, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x17, 0x2b, 0x23, 0x75, 0xb4, 0xa0, 0xff, 0x38, 0xc8,
	0xe9, 0x0f, 0xb0, 0xfb, 0x49, 0xff, 0xe9, 0x06, 0x0a, 0x0a, 0x0a, 0x0a, 0x94, 0x83, 0x15,
	0x83, 0x95, 0x83, 0x60, 0x85, 0x02, 0xea, 0xc8, 0x95, 0x20, 0xea, 0x88, 0x10, 0xfd, 0x95,
	0x10, 0x60, 0xc0, 0x09, 0xb0, 0x22, 0x86, 0xee, 0xe8, 0x20, 0xfb, 0xfd, 0x29, 0x20, 0xd0,
	0x02, 0xca, 0xca, 0xe0, 0x08, 0xb0, 0x09, 0xa5, 0xea, 0xc9, 0xc0, 0x90, 0x03, 0x20, 0xaa,
	0xfd, 0xa6, 0xee, 0xb1, 0xf0, 0x3d, 0x4c, 0xff, 0x91, 0xf0, 0x60, 0xc6, 0x89, 0xa5, 0x89,
	0x30, 0x0f, 0xc9, 0x04, 0xa9, 0x02, 0x90, 0x01, 0x4a, 0x85, 0x1f, 0x85, 0x02, 0x85, 0x2b,
	0x10, 0x1d, 0x18, 0x65, 0x8a, 0x85, 0x89, 0xa9, 0x00, 0x85, 0x02, 0x85, 0x2b, 0x85, 0x1f,
	0xa5, 0x88, 0x85, 0x24, 0x29, 0x0f, 0xa8, 0x88, 0x10, 0xfd, 0x85, 0x14, 0xa9, 0x7c, 0x85,
	0x8a, 0x85, 0x02, 0x85, 0x2a, 0x60, 0xc6, 0x89, 0xa5, 0x89, 0xc9, 0x04, 0x90, 0x04, 0xa9,
	0x00, 0xb0, 0x03, 0xea, 0xa9, 0x02, 0x85, 0x1f, 0x60, 0xa5, 0xea, 0x0a, 0x0a, 0x18, 0x65,
	0xea, 0x18, 0x69, 0x59, 0x85, 0xea, 0x60, 0xa5, 0xc7, 0xd0, 0x5c, 0xf6, 0xcd, 0xb4, 0xcb,
	0xf0, 0x56, 0xc0, 0x05, 0xf0, 0x04, 0xc0, 0x02, 0xd0, 0x24, 0xb4, 0xcd, 0xc0, 0x08, 0xd0,
	0x08, 0xb5, 0xcb, 0xc9, 0x05, 0xf0, 0x46, 0xd0, 0x40, 0xb9, 0xea, 0xff, 0x95, 0x17, 0xa9,
	0x0c, 0x95, 0x15, 0xa9, 0xcb, 0xc9, 0x05, 0xa9, 0x04, 0x90, 0x02, 0xa9, 0x08, 0x95, 0x19,
	0x60, 0xb9, 0x44, 0xfd, 0x85, 0xee, 0xa9, 0xff, 0x85, 0xef, 0xb4, 0xcf, 0xb1, 0xee, 0xd5,
	0xcd, 0xd0, 0x18, 0xc8, 0xb1, 0xee, 0x30, 0x14, 0xc9, 0x3f, 0xf0, 0x14, 0x95, 0x17, 0xc8,
	0xb1, 0xee, 0x95, 0x15, 0xc8, 0xb1, 0xee, 0xc8, 0x94, 0xcf, 0x95, 0x19, 0x60, 0xa9, 0x00,
	0x95, 0xcb, 0xa9, 0x00, 0x95, 0x19, 0x95, 0xcd, 0x95, 0xcf, 0x60, 0xa5, 0xca, 0x29, 0x01,
	0x09, 0x80, 0x85, 0xca, 0x60, 0xc5, 0xcb, 0x90, 0x08, 0x85, 0xcb, 0xa9, 0x00, 0x85, 0xcd,
	0x85, 0xcf, 0x60, 0xc5, 0xcc, 0x90, 0x08, 0x85, 0xcc, 0xa9, 0x00, 0x85, 0xce, 0x85, 0xd0,
	0x60, 0xd8, 0x78, 0xa2, 0x00, 0x8a, 0x95, 0x00, 0xe8, 0xd0, 0xfb, 0xca, 0x9a, 0x20, 0xb2,
	0xfe, 0xa9, 0xc5, 0x85, 0xc7, 0xa9, 0x80, 0x85, 0xaa, 0x4c, 0xd4, 0xf4, 0xa9, 0x00, 0x85,
	0xe6, 0x85, 0xe8, 0x85, 0xe7, 0x85, 0xe9, 0x85, 0xc7, 0xa9, 0x01, 0x85, 0xaa, 0xa9, 0x00,
	0x85, 0x90, 0x85, 0x99, 0x85, 0xc6, 0x20, 0x75, 0xfe, 0xa9, 0x03, 0x85, 0xc9, 0xa9, 0xff,
	0x85, 0x8b, 0xa5, 0x98, 0x29, 0x53, 0xa4, 0xec, 0x19, 0x52, 0xfd, 0x19, 0x59, 0xfd, 0x85,
	0x98, 0xa5, 0xe5, 0x29, 0x7f, 0x85, 0xe5, 0x20, 0xfa, 0xfe, 0xa2, 0x0a, 0xb5, 0x90, 0x95,
	0x9f, 0xca, 0x10, 0xf9, 0xa9, 0x6e, 0x85, 0xa7, 0x60, 0xa2, 0x05, 0xa9, 0x3f, 0x95, 0x92,
	0xca, 0x10, 0xfb, 0x85, 0xeb, 0x85, 0xd7, 0x85, 0xd8, 0x85, 0xd3, 0x85, 0xd4, 0xa9, 0xf6,
	0x85, 0xd5, 0x85, 0xd6, 0x85, 0xd1, 0x85, 0xd2, 0xa2, 0x05, 0xbd, 0x61, 0xfd, 0x95, 0x99,
	0xca, 0xd0, 0xf8, 0x8a, 0x85, 0xcb, 0x85, 0xcc, 0xa9, 0x24, 0x85, 0x91, 0xa9, 0x42, 0x05,
	0x98, 0x85, 0x98, 0xa9, 0x30, 0x85, 0xc8, 0xa5, 0xaa, 0x29, 0xf7, 0x85, 0xaa, 0xa2, 0x1a,
	0xa0, 0x08, 0xb9, 0x22, 0xfd, 0x95, 0xab, 0x88, 0x10, 0x02, 0xa0, 0x08, 0xca, 0x10, 0xf3,
	0x60, 0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe, 0xe7, 0xa5, 0xa5, 0xa5, 0xe7, 0xe7,
	0x42, 0x42, 0x66, 0x42, 0xe7, 0x24, 0xe7, 0x81, 0xe7, 0xe7, 0x81, 0xe7, 0x81, 0xe7, 0x81,
	0x81, 0xe7, 0xa5, 0xa5, 0xe7, 0x81, 0xe7, 0x24, 0xe7, 0xe7, 0xa5, 0xe7, 0x24, 0x24, 0x81,
	0x81, 0x81, 0x81, 0xe7, 0xe7, 0xa5, 0xe7, 0xa5, 0xe7, 0x81, 0x81, 0xe7, 0xa5, 0xe7, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x16, 0x09, 0x0a, 0x02, 0x19, 0x08, 0x0a, 0x03, 0x1f, 0x0c,
	0x08, 0x04, 0x16, 0x0e, 0x07, 0x06, 0xff, 0x01, 0x18, 0x0c, 0x03, 0x03, 0x16, 0x0c, 0x03,
	0x05, 0x14, 0x0c, 0x03, 0x07, 0x12, 0x0c, 0x03, 0x09, 0x10, 0x0c, 0x03, 0x0b, 0x0e, 0x0c,
	0x03, 0x0d, 0x0d, 0x0c, 0x03, 0x0f, 0x10, 0x0c, 0x03, 0x11, 0x3f, 0x01, 0x18, 0x08, 0x07,
	0x04, 0x19, 0x08, 0x05, 0x10, 0x1c, 0x08, 0x02, 0x30, 0x1e, 0x08, 0x01, 0x50, 0xff, 0x01,
	0x18, 0x03, 0x0c, 0x09, 0x10, 0x0a, 0x08, 0x11, 0x12, 0x0e, 0x0f, 0x19, 0x16, 0x0e, 0x08,
	0x29, 0x1a, 0x0e, 0x04, 0x39, 0x1d, 0x0e, 0x02, 0x49, 0xff, 0x10, 0x0d, 0x0a, 0x08, 0x07,
	0x06, 0x05, 0x06, 0x07, 0x03, 0x04, 0x05, 0x06, 0x00, 0x00, 0x98, 0xfe, 0x98, 0xfe, 0x98,
	0xfe,
}

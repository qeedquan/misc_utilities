*** Links

https://github.com/tpm2-software/tpm2-tools
The command line programs to use the TPM

https://github.com/tpm2-software/tpm2-tss
The low level API for the TPM

https://github.com/tpm2-software/tpm2-tss-engine
OpenSSL wrapper for the TPM

https://github.com/stefanberger/swtpm
Software TPM emulator, can be used with QEMU

https://github.com/stefanberger/libtpms
Library that the software TPM emulator uses to implement the functions

https://www.intel.com/content/www/us/en/developer/articles/code-sample/secret-key-provisioning-in-c-using-ptt.html
https://crypto.stanford.edu/cs155old/cs155-spring11/lectures/08-TCG.pdf
https://github.com/nokia/TPMCourse/tree/master/docs
https://ericchiang.github.io/post/tpm-keys/
https://ebrary.net/24784/computer_science/password_hmac_policy_sessions

*** Startup

TPM requires a TPM_STARTUP command to use.
This is done either by the BIOS or the OS.

tpm2_startup command can toggle it during OS runtime

*** Commands

tpm2_createprimary - Allocates and initialize an object for use, saves info to a context file

tpm2_create - Uses the context file created by createprimary to extract public/private area into files
tpm2_load - Load the public/private information into the object

tpm2_startup - Send startup command to TPM

tpm2_rc_decode - Decodes a TPM error code into a readable string 

tpm2_getrandom <num_bytes> - Get some random data from TPM

tpm2_selftest - Do a self-test to verify TPM works

tpm2_pccread - Read the PCR values from various banks in a form of their hashes

*** Hash algorithms
The TPM object names are generated by using a hashing function against something.
This is usually specified by the '-g' option in the commands.

The supported hashing functions are:
SHA1/SHA256/SHA384/SHA512/SM3_256/NULL

*** Files
Context files are created by tpm2_createprimary, the max context files in one run that can be created is 3.

After creating enough context files, the internal TPM state will run out of objects.
You can either reset the entire TPM to clear the objects for reuse.
For swtpm, use swtpm_ioctl to do it
Can also do it from the TPM using the tpm2_flushcontext command

*** Concepts

Hierarchies -
	A tree with parent key at root. Use to wrap and encrypt all children keys.
	
	There are 4 default Hierarchies where one can create the keys:
	Endorsement - privacy sensitive tree. Platform vendors certify that primary keys in this hierarchy are constrained to TPM on this platform.
	Owner - Storage hierarchy for the device owner
	Platform - For vendors/manufacturer
	Null - ephermeral hierarchy, the others are persistent (they survive system reboots)

All TPM objects (key and data) belong to a hierarchy.
Since the seed value for persisent hierarchy are the same across reboot, all the keys generated can be regenerated.

Handle - 32 bit reference to an entity in TPM, 3 type of key handles.
	Transient - Addresses of keys in NVRAM (Need to be loaded into TPM)
	Persistent - Reference keys in NV memory of TPM (Resident in TPM itself)
	Permanent - (Reference that cannot be deleted, such as the handles to the 4 hierarchies)
	Other handles include NV indices, saved session, PCR etc

Key creation - 
	To create keys for signing, need to first create a primary key.
	Primary keys are used to make the children keys for signing.
	A children key can become a primary key in some cases so one can have a nested hierarchy of key chains.
	Each key has a set of attributes that define what they are and can do determined by their attributes:

Some key attributes -
	fixedTPM: If this attribute is set, the key cannot be duplicated in any way
	fixedParent: If this attribute is set, the parent of this key cannot be changed (more info on this in the future posts).
	sign: If a key is to be used for signing, this attribute needs to be set.
	restricted: A key with this attribute set can sign only hashes generated within the TPM
	decrypt: Only keys with this attribute are allowed to create or load children key. If this is attribute is set, the key can be a parent key.
	sensitiveDataOrigin: If this attribute is set, it indicates that the TPM generated all the sensitive data other than auth value for this key
	noDA: The object is subject to dictionary attack protections

Sealing -
	The TPM provides two mechanisms for secure storage: binding and sealing. The
	binding operation encrypts the data using a key that is managed by a particular
	TPM as described above. The sealing process adds to this by only allowing the
	deciphering process to proceed if the platform is in a specific configuration. This
	configuration is determined by data held in the PCR registers. Thus, when data is
	sealed, not only must the same platform be used to unseal the data, but that platform
	must be in a predetermined configuration before the data can be recovered.

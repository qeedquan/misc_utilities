*** Image Types
vxworks      - elf image
vxworks.bin  - raw binary image (this is usually generated by using: objcopy -O vxWorks vxWorks.bin)

ARM -
uvxworks     - vxworks image with uboot header

Intel -
uefi      - first stage bootloader for vxworks
vxbootapp - second stage bootloader for vxworks

BOOTX64.EFI - UEFI will try to load this file on boot as a first stage boot loader. This is the uefi program from vxworks
bootapp.cfg - configuration file that gets loaded first
bootapp.sys - BOOTX64.EFI will attempt to load this file as a main executable by default

In old VxWorks (6.x), there is usually a bootrom.bin support that has code to init the board with the bootapp running after.
With VxWorks 7, it is assumed that U-Boot or UEFI is used to boot the image.
To support old boards without such modern loaders, either use the 6.9 bootrom to load 7 images or port VxBL.

*** Add things to execute in VxWorks bootloader
The VxWorks bootloader has an 's' parameter that gets executed on startup

Example for multiple programs to get executed
startup script (s)   : myScript#/apps/app1.vxe^arg1^arg2^arg3#/apps/app2.vxe^arg1^arg2^arg3#...

Can also specify arguments to rtpSpawn() as follows:

%p=value
    Sets the priority of the initial task of the process. Priorities can be in the range of 0-255.
%s=value
    Sets the stack size for the initial task of the process (an integer parameter).
%o=value
    Sets the process options parameter.
%t=value
    Sets task options for the initial task of the process.

*** Intel

GRUB, SYSLINUX, or a UEFI loader provided by VxWorks can be used as a first stage.
BOOTAPP is provided as a second stage if don't want to load VxWorks image directly.

*** ARM

U-Boot is used to load the BOOTAPP/VxWorks image.

*** Early printing
INCLUDE_DEBUG_KPRINTF
_func_kprintf is used to do early printing on various platforms, also used for alot of core libraries for debugging
These functions can be called in a ISR since they do polling instead of blocking

*** Bootargs

# set host ip, this is the server the bootloader will connect to
h=192.168.1.1

# set ip address for the vxworks
e=192.168.1.100

# set user/pass for target
u=target pw=vxTarget

# set to use standard dtb or not, qemu and platforms like that don't provide complete dtbs for vxworks to init
# so setting f=0x1 allows parts of the vxworks init code to see this case and handle accordingly
f=0x0/0x1

*** Boot Devices
# During bootup, use 'h' command in the shell to show all supported boot device

Usually supported boot devices are from file system (fs) or a network device indexed by the driver name (gei) for Intel cards

If using fs, provide the full path to the image:
boot device : fs
file name   : /tffs0/vxWorks

*** Commands
Bootapp support the following commands from VxWorks:

Custom commands can also be added (use 'h' to list them)

devs
cd path
pwd
rm file
ls path
cp src dst


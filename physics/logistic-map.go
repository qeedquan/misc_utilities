/*

http://sites.science.oregonstate.edu/~landaur/Books/CPbook/index.html

*/

package main

import (
	"bufio"
	"flag"
	"fmt"
	"io"
	"os"
)

type option struct {
	x0, x1, dx float64
	y0         float64
	nt         int
	w, h       int
	imgfile    string
	outfile    string
}

var opt option

func main() {
	parseflags()

	r := logistic(opt.x0, opt.x1, opt.dx, opt.y0, opt.nt)
	w := bufio.NewWriter(os.Stdout)
	output(w, r, &opt)
	w.Flush()
}

func parseflags() {
	flag.Float64Var(&opt.x0, "x0", 1, "start boundary")
	flag.Float64Var(&opt.x1, "x1", 4, "end boundary")
	flag.Float64Var(&opt.dx, "dx", 0.025, "step size")
	flag.Float64Var(&opt.y0, "y0", 0.5, "initial value")
	flag.IntVar(&opt.nt, "nt", 400, "transients")
	flag.IntVar(&opt.w, "w", 512, "image width")
	flag.IntVar(&opt.h, "h", 512, "image height")
	flag.StringVar(&opt.imgfile, "i", "logistic_map.png", "output image file")
	flag.StringVar(&opt.outfile, "o", "logistic_map.dat", "output data file")
	flag.Parse()
}

func output(w io.Writer, r [][2]float64, o *option) {
	fmt.Fprintf(w, "# Autogenerated gnuplot script\n")
	fmt.Fprintf(w, "# min=%.6f max=%.6f steps=%.6f transients=%d\n",
		o.x0, o.x1, o.dx, o.nt)
	fmt.Fprintf(w, "set term png size %d, %d\n", o.w, o.h)
	fmt.Fprintf(w, "set output \"%s\"\n", o.imgfile)
	fmt.Fprintf(w, "set title \"%s\"\n", "Logistic Map")
	fmt.Fprintf(w, "plot \"-\"\n")
	for _, r := range r {
		fmt.Fprintf(w, "%.6f %.6f\n", r[0], r[1])
	}
	fmt.Fprintf(w, "e\n")
}

func logistic(x0, x1, dx, y0 float64, nt int) (r [][2]float64) {
	for x := x0; x <= x1; x += dx {
		y := y0
		// get rid of transients
		for i := 0; i < nt/2; i++ {
			y = x * y * (1 - y)
		}
		for i := nt / 2; i < nt; i++ {
			y = x * y * (1 - y)
			r = append(r, [2]float64{x, y})
		}
	}
	return
}

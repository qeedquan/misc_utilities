package main

import (
	"flag"
	"fmt"
	"math/rand"
	"time"
)

var (
	depth = flag.Uint("d", 32, "depth")
	width = flag.Uint("w", 4, "width")
)

func main() {
	flag.Parse()
	rand.Seed(time.Now().UnixNano())

	fmt.Printf("-- Autogenerated MIF file with random values\n")
	fmt.Printf("DEPTH = %2d;             -- The size of memory in words\n", *depth)
	fmt.Printf("WIDTH = %2d;             -- The size of data in bits\n", *width)
	fmt.Printf("ADDRESS_RADIX = HEX;    -- The radix for address values\n")
	fmt.Printf("DATA_RADIX = BIN;       -- The radix for data values\n")
	fmt.Printf("CONTENT                 -- start of (address : data pairs)\n")
	fmt.Printf("BEGIN\n")

	lg := log16(*depth)
	for i := uint(0); i < *depth; i++ {
		rn := rand.Intn(1 << *width)
		fmt.Printf("%0*x : %0*b;\n", lg, i, *width, rn)
	}

	fmt.Printf("END;\n")
}

func log16(x uint) uint {
	n := uint(0)
	for i := uint(1); i < x; i <<= 4 {
		n++
	}
	return n
}
